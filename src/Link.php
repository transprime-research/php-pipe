<?php

 namespace Transprime\Piper;

/**
 * @method self func_get_arg()
 * @method self strlen()
 * @method self strcmp(string $string2)
 * @method self strncmp(string $string2, int $length)
 * @method self strcasecmp(string $string2)
 * @method self strncasecmp(string $string2, int $length)
 * @method self error_reporting()
 * @method self define( $value, bool $case_insensitive = false)
 * @method self defined()
 * @method self get_class()
 * @method self get_parent_class()
 * @method self is_subclass_of(string $class, bool $allow_string = true)
 * @method self is_a(string $class, bool $allow_string = false)
 * @method self get_class_vars()
 * @method self get_object_vars()
 * @method self get_mangled_object_vars()
 * @method self get_class_methods()
 * @method self method_exists(string $method)
 * @method self property_exists(string $property)
 * @method self class_exists(bool $autoload = true)
 * @method self interface_exists(bool $autoload = true)
 * @method self trait_exists(bool $autoload = true)
 * @method self function_exists()
 * @method self class_alias(string $alias, bool $autoload = true)
 * @method self trigger_error(int $error_level = 1024)
 * @method self user_error(int $error_level = 1024)
 * @method self set_error_handler(int $error_levels = 32767)
 * @method self set_exception_handler()
 * @method self get_defined_functions()
 * @method self get_resource_type()
 * @method self get_resource_id()
 * @method self get_resources()
 * @method self get_loaded_extensions()
 * @method self get_defined_constants()
 * @method self debug_backtrace(int $limit = 0)
 * @method self debug_print_backtrace(int $limit = 0)
 * @method self extension_loaded()
 * @method self get_extension_funcs()
 * @method self strtotime(?int $baseTimestamp = null)
 * @method self date(?int $timestamp = null)
 * @method self idate(?int $timestamp = null)
 * @method self gmdate(?int $timestamp = null)
 * @method self mktime(?int $minute = null, ?int $second = null, ?int $month = null, ?int $day = null, ?int $year = null)
 * @method self gmmktime(?int $minute = null, ?int $second = null, ?int $month = null, ?int $day = null, ?int $year = null)
 * @method self checkdate(int $day, int $year)
 * @method self strftime(?int $timestamp = null)
 * @method self gmstrftime(?int $timestamp = null)
 * @method self localtime(bool $associative = false)
 * @method self getdate()
 * @method self date_create(?DateTimeZone $timezone = null)
 * @method self date_create_immutable(?DateTimeZone $timezone = null)
 * @method self date_create_from_format(string $datetime, ?DateTimeZone $timezone = null)
 * @method self date_create_immutable_from_format(string $datetime, ?DateTimeZone $timezone = null)
 * @method self date_parse()
 * @method self date_parse_from_format(string $datetime)
 * @method self date_format(string $format)
 * @method self date_modify(string $modifier)
 * @method self date_add(DateInterval $interval)
 * @method self date_sub(DateInterval $interval)
 * @method self date_timezone_get()
 * @method self date_timezone_set(DateTimeZone $timezone)
 * @method self date_offset_get()
 * @method self date_diff(DateTimeInterface $targetObject, bool $absolute = false)
 * @method self date_time_set(int $hour, int $minute, int $second = 0, int $microsecond = 0)
 * @method self date_date_set(int $year, int $month, int $day)
 * @method self date_isodate_set(int $year, int $week, int $dayOfWeek = 1)
 * @method self date_timestamp_set(int $timestamp)
 * @method self date_timestamp_get()
 * @method self timezone_open()
 * @method self timezone_name_get()
 * @method self timezone_name_from_abbr(int $utcOffset = -1, int $isDST = -1)
 * @method self timezone_offset_get(DateTimeInterface $datetime)
 * @method self timezone_transitions_get(int $timestampBegin = -9223372036854775808, int $timestampEnd = 9223372036854775807)
 * @method self timezone_location_get()
 * @method self timezone_identifiers_list(?string $countryCode = null)
 * @method self date_interval_create_from_date_string()
 * @method self date_interval_format(string $format)
 * @method self date_default_timezone_set()
 * @method self date_sunrise(int $returnFormat = 1, ?float $latitude = null, ?float $longitude = null, ?float $zenith = null, ?float $utcOffset = null)
 * @method self date_sunset(int $returnFormat = 1, ?float $latitude = null, ?float $longitude = null, ?float $zenith = null, ?float $utcOffset = null)
 * @method self date_sun_info(float $latitude, float $longitude)
 * @method self libxml_set_streams_context()
 * @method self libxml_use_internal_errors()
 * @method self libxml_disable_entity_loader()
 * @method self libxml_set_external_entity_loader()
 * @method self openssl_x509_export_to_file(string $output_filename, bool $no_text = true)
 * @method self openssl_x509_export(  &$output, bool $no_text = true)
 * @method self openssl_x509_fingerprint(string $digest_algo = "sha1", bool $binary = false)
 * @method self openssl_x509_check_private_key( $private_key)
 * @method self openssl_x509_verify( $public_key)
 * @method self openssl_x509_parse(bool $short_names = true)
 * @method self openssl_x509_checkpurpose(int $purpose, array $ca_info = [], ?string $untrusted_certificates_file = null)
 * @method self openssl_x509_read()
 * @method self openssl_x509_free()
 * @method self openssl_pkcs12_export_to_file(string $output_filename,  $private_key, string $passphrase, array $options = [])
 * @method self openssl_pkcs12_export(  &$output,  $private_key, string $passphrase, array $options = [])
 * @method self openssl_pkcs12_read(  &$certificates, string $passphrase)
 * @method self openssl_csr_export_to_file(string $output_filename, bool $no_text = true)
 * @method self openssl_csr_export(  &$output, bool $no_text = true)
 * @method self openssl_csr_sign(OpenSSLCertificate|string|null $ca_certificate,  $private_key, int $days, ?array $options = null, int $serial = 0)
 * @method self openssl_csr_new(  &$private_key, ?array $options = null, ?array $extra_attributes = null)
 * @method self openssl_csr_get_subject(bool $short_names = true)
 * @method self openssl_csr_get_public_key(bool $short_names = true)
 * @method self openssl_pkey_new()
 * @method self openssl_pkey_export_to_file(string $output_filename, ?string $passphrase = null, ?array $options = null)
 * @method self openssl_pkey_export(  &$output, ?string $passphrase = null, ?array $options = null)
 * @method self openssl_pkey_get_public()
 * @method self openssl_get_publickey()
 * @method self openssl_pkey_free()
 * @method self openssl_free_key()
 * @method self openssl_pkey_get_private(?string $passphrase = null)
 * @method self openssl_get_privatekey(?string $passphrase = null)
 * @method self openssl_pkey_get_details()
 * @method self openssl_pbkdf2(string $salt, int $key_length, int $iterations, string $digest_algo = "sha1")
 * @method self openssl_pkcs7_verify(int $flags, ?string $signers_certificates_filename = null, array $ca_info = [], ?string $untrusted_certificates_filename = null, ?string $content = null, ?string $output_filename = null)
 * @method self openssl_pkcs7_encrypt(string $output_filename,  $certificate, ?array $headers, int $flags = 0, int $cipher_algo = 0)
 * @method self openssl_pkcs7_sign(string $output_filename, OpenSSLCertificate|string $certificate,  $private_key, ?array $headers, int $flags = 64, ?string $untrusted_certificates_filename = null)
 * @method self openssl_pkcs7_decrypt(string $output_filename,  $certificate,  $private_key = null)
 * @method self openssl_pkcs7_read(  &$certificates)
 * @method self openssl_cms_verify(int $flags = 0, ?string $certificates = null, array $ca_info = [], ?string $untrusted_certificates_filename = null, ?string $content = null, ?string $pk7 = null, ?string $sigfile = null, int $encoding = 1)
 * @method self openssl_cms_encrypt(string $output_filename,  $certificate, ?array $headers, int $flags = 0, int $encoding = 1, int $cipher_algo = 0)
 * @method self openssl_cms_sign(string $output_filename, OpenSSLCertificate|string $certificate,  $private_key, ?array $headers, int $flags = 0, int $encoding = 1, ?string $untrusted_certificates_filename = null)
 * @method self openssl_cms_decrypt(string $output_filename,  $certificate,  $private_key = null, int $encoding = 1)
 * @method self openssl_cms_read(  &$certificates)
 * @method self openssl_private_encrypt(  &$encrypted_data,  $private_key, int $padding = 1)
 * @method self openssl_private_decrypt(  &$decrypted_data,  $private_key, int $padding = 1)
 * @method self openssl_public_encrypt(  &$encrypted_data,  $public_key, int $padding = 1)
 * @method self openssl_public_decrypt(  &$decrypted_data,  $public_key, int $padding = 1)
 * @method self openssl_sign(  &$signature,  $private_key, string|int $algorithm = 1)
 * @method self openssl_verify(string $signature,  $public_key, string|int $algorithm = 1)
 * @method self openssl_seal(  &$sealed_data,   &$encrypted_keys, array $public_key, string $cipher_algo,   &$iv = null)
 * @method self openssl_open(  &$output, string $encrypted_key,  $private_key, string $cipher_algo, ?string $iv = null)
 * @method self openssl_get_md_methods()
 * @method self openssl_get_cipher_methods()
 * @method self openssl_digest(string $digest_algo, bool $binary = false)
 * @method self openssl_encrypt(string $cipher_algo, string $passphrase, int $options = 0, string $iv = "",   &$tag = null, string $aad = "", int $tag_length = 16)
 * @method self openssl_decrypt(string $cipher_algo, string $passphrase, int $options = 0, string $iv = "", string $tag = "", string $aad = "")
 * @method self openssl_cipher_iv_length()
 * @method self openssl_dh_compute_key(OpenSSLAsymmetricKey $private_key)
 * @method self openssl_pkey_derive( $private_key, int $key_length = 0)
 * @method self openssl_random_pseudo_bytes(  &$strong_result = null)
 * @method self openssl_spki_new(string $challenge, int $digest_algo = 2)
 * @method self openssl_spki_verify()
 * @method self openssl_spki_export()
 * @method self openssl_spki_export_challenge()
 * @method self preg_match(string $subject,   &$matches = null, int $flags = 0, int $offset = 0)
 * @method self preg_match_all(string $subject,   &$matches = null, int $flags = 0, int $offset = 0)
 * @method self preg_replace(array|string $replacement, array|string $subject, int $limit = -1,   &$count = null)
 * @method self preg_filter(array|string $replacement, array|string $subject, int $limit = -1,   &$count = null)
 * @method self preg_replace_callback(callable $callback, array|string $subject, int $limit = -1,   &$count = null, int $flags = 0)
 * @method self preg_replace_callback_array(array|string $subject, int $limit = -1,   &$count = null, int $flags = 0)
 * @method self preg_split(string $subject, int $limit = -1, int $flags = 0)
 * @method self preg_quote(?string $delimiter = null)
 * @method self preg_grep(array $array, int $flags = 0)
 * @method self ob_gzhandler(int $flags)
 * @method self gzfile(int $use_include_path = 0)
 * @method self gzopen(string $mode, int $use_include_path = 0)
 * @method self readgzfile(int $use_include_path = 0)
 * @method self zlib_encode(int $encoding, int $level = -1)
 * @method self zlib_decode(int $max_length = 0)
 * @method self gzdeflate(int $level = -1, int $encoding = -15)
 * @method self gzencode(int $level = -1, int $encoding = 31)
 * @method self gzcompress(int $level = -1, int $encoding = 15)
 * @method self gzinflate(int $max_length = 0)
 * @method self gzdecode(int $max_length = 0)
 * @method self gzuncompress(int $max_length = 0)
 * @method self gzwrite(string $data, ?int $length = null)
 * @method self gzputs(string $data, ?int $length = null)
 * @method self gzrewind()
 * @method self gzclose()
 * @method self gzeof()
 * @method self gzgetc()
 * @method self gzpassthru()
 * @method self gzseek(int $offset, int $whence = 0)
 * @method self gztell()
 * @method self gzread(int $length)
 * @method self gzgets(?int $length = null)
 * @method self deflate_init(array $options = [])
 * @method self deflate_add(string $data, int $flush_mode = 2)
 * @method self inflate_init(array $options = [])
 * @method self inflate_add(string $data, int $flush_mode = 2)
 * @method self inflate_get_status()
 * @method self inflate_get_read_len()
 * @method self bcadd(string $num2, ?int $scale = null)
 * @method self bcsub(string $num2, ?int $scale = null)
 * @method self bcmul(string $num2, ?int $scale = null)
 * @method self bcdiv(string $num2, ?int $scale = null)
 * @method self bcmod(string $num2, ?int $scale = null)
 * @method self bcpowmod(string $exponent, string $modulus, ?int $scale = null)
 * @method self bcpow(string $exponent, ?int $scale = null)
 * @method self bcsqrt(?int $scale = null)
 * @method self bccomp(string $num2, ?int $scale = null)
 * @method self bcscale()
 * @method self bzopen(string $mode)
 * @method self bzread(int $length = 1024)
 * @method self bzwrite(string $data, ?int $length = null)
 * @method self bzflush()
 * @method self bzclose()
 * @method self bzerrno()
 * @method self bzerrstr()
 * @method self bzerror()
 * @method self bzcompress(int $block_size = 4, int $work_factor = 0)
 * @method self bzdecompress(bool $use_less_memory = false)
 * @method self cal_days_in_month(int $month, int $year)
 * @method self cal_from_jd(int $calendar)
 * @method self cal_info()
 * @method self cal_to_jd(int $month, int $day, int $year)
 * @method self easter_date(int $mode = 0)
 * @method self easter_days(int $mode = 0)
 * @method self frenchtojd(int $day, int $year)
 * @method self gregoriantojd(int $day, int $year)
 * @method self jddayofweek(int $mode = 0)
 * @method self jdmonthname(int $mode)
 * @method self jdtofrench()
 * @method self jdtogregorian()
 * @method self jdtojewish(bool $hebrew = false, int $flags = 0)
 * @method self jdtojulian()
 * @method self jdtounix()
 * @method self jewishtojd(int $day, int $year)
 * @method self juliantojd(int $day, int $year)
 * @method self unixtojd()
 * @method self ctype_alnum()
 * @method self ctype_alpha()
 * @method self ctype_cntrl()
 * @method self ctype_digit()
 * @method self ctype_lower()
 * @method self ctype_graph()
 * @method self ctype_print()
 * @method self ctype_punct()
 * @method self ctype_space()
 * @method self ctype_upper()
 * @method self ctype_xdigit()
 * @method self curl_close()
 * @method self curl_copy_handle()
 * @method self curl_errno()
 * @method self curl_error()
 * @method self curl_escape(string $string)
 * @method self curl_unescape(string $string)
 * @method self curl_multi_setopt(int $option, mixed $value)
 * @method self curl_exec()
 * @method self curl_file_create(?string $mime_type = null, ?string $posted_filename = null)
 * @method self curl_getinfo(?int $option = null)
 * @method self curl_init()
 * @method self curl_multi_add_handle(CurlHandle $handle)
 * @method self curl_multi_close()
 * @method self curl_multi_errno()
 * @method self curl_multi_exec(  &$still_running)
 * @method self curl_multi_getcontent()
 * @method self curl_multi_info_read(  &$queued_messages = null)
 * @method self curl_multi_remove_handle(CurlHandle $handle)
 * @method self curl_multi_select(float $timeout = 1)
 * @method self curl_multi_strerror()
 * @method self curl_pause(int $flags)
 * @method self curl_reset()
 * @method self curl_setopt_array(array $options)
 * @method self curl_setopt(int $option, mixed $value)
 * @method self curl_share_close()
 * @method self curl_share_errno()
 * @method self curl_share_setopt(int $option, mixed $value)
 * @method self curl_share_strerror()
 * @method self curl_strerror()
 * @method self dba_popen( $mode,  $handler,  $handler_params)
 * @method self dba_open( $mode,  $handler,  $handler_params)
 * @method self dba_close()
 * @method self dba_exists( $dba)
 * @method self dba_fetch( $skip,  $dba)
 * @method self dba_key_split()
 * @method self dba_firstkey()
 * @method self dba_nextkey()
 * @method self dba_delete( $dba)
 * @method self dba_insert(string $value,  $dba)
 * @method self dba_replace(string $value,  $dba)
 * @method self dba_optimize()
 * @method self dba_sync()
 * @method self dba_handlers()
 * @method self dom_import_simplexml()
 * @method self exif_tagname()
 * @method self exif_read_data(?string $required_sections = null, bool $as_arrays = false, bool $read_thumbnail = false)
 * @method self exif_thumbnail(  &$width = null,   &$height = null,   &$image_type = null)
 * @method self exif_imagetype()
 * @method self finfo_open(?string $magic_database = null)
 * @method self finfo_close()
 * @method self finfo_set_flags(int $flags)
 * @method self finfo_file(string $filename, int $flags = 0,  $context = null)
 * @method self finfo_buffer(string $string, int $flags = 0,  $context = null)
 * @method self mime_content_type()
 * @method self filter_has_var(string $var_name)
 * @method self filter_input(string $var_name, int $filter = 516, array|int $options = 0)
 * @method self filter_var(int $filter = 516, array|int $options = 0)
 * @method self filter_input_array(array|int $options = 516, bool $add_empty = true)
 * @method self filter_var_array(array|int $options = 516, bool $add_empty = true)
 * @method self filter_id()
 * @method self ftp_connect(int $port = 21, int $timeout = 90)
 * @method self ftp_ssl_connect(int $port = 21, int $timeout = 90)
 * @method self ftp_login(string $username, string $password)
 * @method self ftp_pwd()
 * @method self ftp_cdup()
 * @method self ftp_chdir(string $directory)
 * @method self ftp_exec(string $command)
 * @method self ftp_raw(string $command)
 * @method self ftp_mkdir(string $directory)
 * @method self ftp_rmdir(string $directory)
 * @method self ftp_chmod(int $permissions, string $filename)
 * @method self ftp_alloc(int $size,   &$response = null)
 * @method self ftp_nlist(string $directory)
 * @method self ftp_rawlist(string $directory, bool $recursive = false)
 * @method self ftp_mlsd(string $directory)
 * @method self ftp_systype()
 * @method self ftp_fget( $stream, string $remote_filename, int $mode = 2, int $offset = 0)
 * @method self ftp_nb_fget( $stream, string $remote_filename, int $mode = 2, int $offset = 0)
 * @method self ftp_pasv(bool $enable)
 * @method self ftp_get(string $local_filename, string $remote_filename, int $mode = 2, int $offset = 0)
 * @method self ftp_nb_get(string $local_filename, string $remote_filename, int $mode = 2, int $offset = 0)
 * @method self ftp_nb_continue()
 * @method self ftp_fput(string $remote_filename,  $stream, int $mode = 2, int $offset = 0)
 * @method self ftp_nb_fput(string $remote_filename,  $stream, int $mode = 2, int $offset = 0)
 * @method self ftp_put(string $remote_filename, string $local_filename, int $mode = 2, int $offset = 0)
 * @method self ftp_append(string $remote_filename, string $local_filename, int $mode = 2)
 * @method self ftp_nb_put(string $remote_filename, string $local_filename, int $mode = 2, int $offset = 0)
 * @method self ftp_size(string $filename)
 * @method self ftp_mdtm(string $filename)
 * @method self ftp_rename(string $from, string $to)
 * @method self ftp_delete(string $filename)
 * @method self ftp_site(string $command)
 * @method self ftp_close()
 * @method self ftp_quit()
 * @method self ftp_set_option(int $option,  $value)
 * @method self ftp_get_option(int $option)
 * @method self imageloadfont()
 * @method self imagesetstyle(array $style)
 * @method self imagecreatetruecolor(int $height)
 * @method self imageistruecolor()
 * @method self imagetruecolortopalette(bool $dither, int $num_colors)
 * @method self imagepalettetotruecolor()
 * @method self imagecolormatch(GdImage $image2)
 * @method self imagesetthickness(int $thickness)
 * @method self imagefilledellipse(int $center_x, int $center_y, int $width, int $height, int $color)
 * @method self imagefilledarc(int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color, int $style)
 * @method self imagealphablending(bool $enable)
 * @method self imagesavealpha(bool $enable)
 * @method self imagelayereffect(int $effect)
 * @method self imagecolorallocatealpha(int $red, int $green, int $blue, int $alpha)
 * @method self imagecolorresolvealpha(int $red, int $green, int $blue, int $alpha)
 * @method self imagecolorclosestalpha(int $red, int $green, int $blue, int $alpha)
 * @method self imagecolorexactalpha(int $red, int $green, int $blue, int $alpha)
 * @method self imagecopyresampled(GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height)
 * @method self imagerotate(float $angle, int $background_color, bool $ignore_transparent = false)
 * @method self imagesettile(GdImage $tile)
 * @method self imagesetbrush(GdImage $brush)
 * @method self imagecreate(int $height)
 * @method self imagecreatefromstring()
 * @method self imagecreatefromgif()
 * @method self imagecreatefromjpeg()
 * @method self imagecreatefrompng()
 * @method self imagecreatefromwebp()
 * @method self imagecreatefromxbm()
 * @method self imagecreatefromxpm()
 * @method self imagecreatefromwbmp()
 * @method self imagecreatefromgd()
 * @method self imagecreatefromgd2()
 * @method self imagecreatefromgd2part(int $x, int $y, int $width, int $height)
 * @method self imagecreatefrombmp()
 * @method self imagecreatefromtga()
 * @method self imagexbm(?string $filename, ?int $foreground_color = null)
 * @method self imagegif( $file = null)
 * @method self imagepng( $file = null, int $quality = -1, int $filters = -1)
 * @method self imagewebp( $file = null, int $quality = -1)
 * @method self imagejpeg( $file = null, int $quality = -1)
 * @method self imagewbmp( $file = null, ?int $foreground_color = null)
 * @method self imagegd(?string $file = null)
 * @method self imagegd2(?string $file = null, int $chunk_size, int $mode)
 * @method self imagebmp( $file = null, bool $compressed = true)
 * @method self imagedestroy()
 * @method self imagecolorallocate(int $red, int $green, int $blue)
 * @method self imagepalettecopy(GdImage $src)
 * @method self imagecolorat(int $x, int $y)
 * @method self imagecolorclosest(int $red, int $green, int $blue)
 * @method self imagecolorclosesthwb(int $red, int $green, int $blue)
 * @method self imagecolordeallocate(int $color)
 * @method self imagecolorresolve(int $red, int $green, int $blue)
 * @method self imagecolorexact(int $red, int $green, int $blue)
 * @method self imagecolorset(int $color, int $red, int $green, int $blue, int $alpha = 0)
 * @method self imagecolorsforindex(int $color)
 * @method self imagegammacorrect(float $input_gamma, float $output_gamma)
 * @method self imagesetpixel(int $x, int $y, int $color)
 * @method self imageline(int $x1, int $y1, int $x2, int $y2, int $color)
 * @method self imagedashedline(int $x1, int $y1, int $x2, int $y2, int $color)
 * @method self imagerectangle(int $x1, int $y1, int $x2, int $y2, int $color)
 * @method self imagefilledrectangle(int $x1, int $y1, int $x2, int $y2, int $color)
 * @method self imagearc(int $center_x, int $center_y, int $width, int $height, int $start_angle, int $end_angle, int $color)
 * @method self imageellipse(int $center_x, int $center_y, int $width, int $height, int $color)
 * @method self imagefilltoborder(int $x, int $y, int $border_color, int $color)
 * @method self imagefill(int $x, int $y, int $color)
 * @method self imagecolorstotal()
 * @method self imagecolortransparent(?int $color = null)
 * @method self imageinterlace(?bool $enable = null)
 * @method self imagepolygon(array $points, int $num_points_or_color, ?int $color = null)
 * @method self imageopenpolygon(array $points, int $num_points_or_color, ?int $color = null)
 * @method self imagefilledpolygon(array $points, int $num_points_or_color, ?int $color = null)
 * @method self imagefontwidth()
 * @method self imagefontheight()
 * @method self imagechar(int $font, int $x, int $y, string $char, int $color)
 * @method self imagecharup(int $font, int $x, int $y, string $char, int $color)
 * @method self imagestring(int $font, int $x, int $y, string $string, int $color)
 * @method self imagestringup(int $font, int $x, int $y, string $string, int $color)
 * @method self imagecopy(GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height)
 * @method self imagecopymerge(GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct)
 * @method self imagecopymergegray(GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $src_width, int $src_height, int $pct)
 * @method self imagecopyresized(GdImage $src_image, int $dst_x, int $dst_y, int $src_x, int $src_y, int $dst_width, int $dst_height, int $src_width, int $src_height)
 * @method self imagesx()
 * @method self imagesy()
 * @method self imagesetclip(int $x1, int $y1, int $x2, int $y2)
 * @method self imagegetclip()
 * @method self imageftbbox(float $angle, string $font_filename, string $string, array $options = [])
 * @method self imagefttext(float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = [])
 * @method self imagettfbbox(float $angle, string $font_filename, string $string, array $options = [])
 * @method self imagettftext(float $size, float $angle, int $x, int $y, int $color, string $font_filename, string $text, array $options = [])
 * @method self imagefilter(int $filter,  $args)
 * @method self imageconvolution(array $matrix, float $divisor, float $offset)
 * @method self imageflip(int $mode)
 * @method self imageantialias(bool $enable)
 * @method self imagecrop(array $rectangle)
 * @method self imagecropauto(int $mode = 0, float $threshold = 0.5, int $color = -1)
 * @method self imagescale(int $width, int $height = -1, int $mode = 3)
 * @method self imageaffine(array $affine, ?array $clip = null)
 * @method self imageaffinematrixget( $options)
 * @method self imageaffinematrixconcat(array $matrix2)
 * @method self imagegetinterpolation()
 * @method self imagesetinterpolation(int $method = 3)
 * @method self imageresolution(?int $resolution_x = null, ?int $resolution_y = null)
 * @method self textdomain()
 * @method self gettext()
 * @method self _()
 * @method self dgettext(string $message)
 * @method self dcgettext(string $message, int $category)
 * @method self bindtextdomain(?string $directory)
 * @method self ngettext(string $plural, int $count)
 * @method self dngettext(string $singular, string $plural, int $count)
 * @method self dcngettext(string $singular, string $plural, int $count, int $category)
 * @method self bind_textdomain_codeset(?string $codeset)
 * @method self gmp_init(int $base = 0)
 * @method self gmp_import(int $word_size = 1, int $flags = 17)
 * @method self gmp_export(int $word_size = 1, int $flags = 17)
 * @method self gmp_intval()
 * @method self gmp_strval(int $base = 10)
 * @method self gmp_add(GMP|string|int $num2)
 * @method self gmp_sub(GMP|string|int $num2)
 * @method self gmp_mul(GMP|string|int $num2)
 * @method self gmp_div_qr(GMP|string|int $num2, int $rounding_mode = 0)
 * @method self gmp_div_q(GMP|string|int $num2, int $rounding_mode = 0)
 * @method self gmp_div_r(GMP|string|int $num2, int $rounding_mode = 0)
 * @method self gmp_div(GMP|string|int $num2, int $rounding_mode = 0)
 * @method self gmp_mod(GMP|string|int $num2)
 * @method self gmp_divexact(GMP|string|int $num2)
 * @method self gmp_neg()
 * @method self gmp_abs()
 * @method self gmp_fact()
 * @method self gmp_sqrt()
 * @method self gmp_sqrtrem()
 * @method self gmp_root(int $nth)
 * @method self gmp_rootrem(int $nth)
 * @method self gmp_pow(int $exponent)
 * @method self gmp_powm(GMP|string|int $exponent, GMP|string|int $modulus)
 * @method self gmp_perfect_square()
 * @method self gmp_perfect_power()
 * @method self gmp_prob_prime(int $repetitions = 10)
 * @method self gmp_gcd(GMP|string|int $num2)
 * @method self gmp_gcdext(GMP|string|int $num2)
 * @method self gmp_lcm(GMP|string|int $num2)
 * @method self gmp_invert(GMP|string|int $num2)
 * @method self gmp_jacobi(GMP|string|int $num2)
 * @method self gmp_legendre(GMP|string|int $num2)
 * @method self gmp_kronecker(GMP|string|int $num2)
 * @method self gmp_cmp(GMP|string|int $num2)
 * @method self gmp_sign()
 * @method self gmp_random_seed()
 * @method self gmp_random_bits()
 * @method self gmp_random_range(GMP|string|int $max)
 * @method self gmp_and(GMP|string|int $num2)
 * @method self gmp_or(GMP|string|int $num2)
 * @method self gmp_com()
 * @method self gmp_xor(GMP|string|int $num2)
 * @method self gmp_setbit(int $index, bool $value = true)
 * @method self gmp_clrbit(int $index)
 * @method self gmp_testbit(int $index)
 * @method self gmp_scan0(int $start)
 * @method self gmp_scan1(int $start)
 * @method self gmp_popcount()
 * @method self gmp_hamdist(GMP|string|int $num2)
 * @method self gmp_nextprime()
 * @method self gmp_binomial(int $k)
 * @method self hash(string $data, bool $binary = false)
 * @method self hash_file(string $filename, bool $binary = false)
 * @method self hash_hmac(string $data, string $key, bool $binary = false)
 * @method self hash_hmac_file(string $filename, string $key, bool $binary = false)
 * @method self hash_init(int $flags = 0, string $key = "")
 * @method self hash_update(string $data)
 * @method self hash_update_stream( $stream, int $length = -1)
 * @method self hash_update_file(string $filename,  $stream_context = null)
 * @method self hash_final(bool $binary = false)
 * @method self hash_copy()
 * @method self hash_pbkdf2(string $password, string $salt, int $iterations, int $length = 0, bool $binary = false)
 * @method self hash_equals(string $user_string)
 * @method self hash_hkdf(string $key, int $length = 0, string $info = "", string $salt = "")
 * @method self mhash_get_block_size()
 * @method self mhash_get_hash_name()
 * @method self mhash_keygen_s2k(string $password, string $salt, int $length)
 * @method self mhash(string $data, ?string $key = null)
 * @method self iconv_strlen(?string $encoding = null)
 * @method self iconv_substr(int $offset, ?int $length = null, ?string $encoding = null)
 * @method self iconv_strpos(string $needle, int $offset = 0, ?string $encoding = null)
 * @method self iconv_strrpos(string $needle, ?string $encoding = null)
 * @method self iconv_mime_encode(string $field_value, array $options = [])
 * @method self iconv_mime_decode(int $mode = 0, ?string $encoding = null)
 * @method self iconv_mime_decode_headers(int $mode = 0, ?string $encoding = null)
 * @method self iconv(string $to_encoding, string $string)
 * @method self iconv_set_encoding(string $encoding)
 * @method self iconv_get_encoding()
 * @method self intlcal_create_instance(?string $locale = null)
 * @method self intlcal_get_keyword_values_for_locale(string $locale, bool $onlyCommon)
 * @method self intlcal_get(int $field)
 * @method self intlcal_get_time()
 * @method self intlcal_set_time(float $timestamp)
 * @method self intlcal_add(int $field, int $value)
 * @method self intlcal_set_time_zone( $timezone)
 * @method self intlcal_after(IntlCalendar $other)
 * @method self intlcal_before(IntlCalendar $other)
 * @method self intlcal_set(int $year, int $month, int $dayOfMonth, int $hour, int $minute, int $second)
 * @method self intlcal_roll(int $field,  $value)
 * @method self intlcal_clear(?int $field = null)
 * @method self intlcal_field_difference(float $timestamp, int $field)
 * @method self intlcal_get_actual_maximum(int $field)
 * @method self intlcal_get_actual_minimum(int $field)
 * @method self intlcal_get_day_of_week_type(int $dayOfWeek)
 * @method self intlcal_get_first_day_of_week()
 * @method self intlcal_get_least_maximum(int $field)
 * @method self intlcal_get_greatest_minimum(int $field)
 * @method self intlcal_get_locale(int $type)
 * @method self intlcal_get_maximum(int $field)
 * @method self intlcal_get_minimal_days_in_first_week()
 * @method self intlcal_set_minimal_days_in_first_week(int $days)
 * @method self intlcal_get_minimum(int $field)
 * @method self intlcal_get_time_zone()
 * @method self intlcal_get_type()
 * @method self intlcal_get_weekend_transition(int $dayOfWeek)
 * @method self intlcal_in_daylight_time()
 * @method self intlcal_is_lenient()
 * @method self intlcal_is_set(int $field)
 * @method self intlcal_is_equivalent_to(IntlCalendar $other)
 * @method self intlcal_is_weekend(?float $timestamp = null)
 * @method self intlcal_set_first_day_of_week(int $dayOfWeek)
 * @method self intlcal_set_lenient(bool $lenient)
 * @method self intlcal_get_repeated_wall_time_option()
 * @method self intlcal_equals(IntlCalendar $other)
 * @method self intlcal_get_skipped_wall_time_option()
 * @method self intlcal_set_repeated_wall_time_option(int $option)
 * @method self intlcal_set_skipped_wall_time_option(int $option)
 * @method self intlcal_from_date_time(?string $locale = null)
 * @method self intlcal_to_date_time()
 * @method self intlcal_get_error_code()
 * @method self intlcal_get_error_message()
 * @method self intlgregcal_create_instance( $localeOrMonth,  $day,  $hour,  $minute,  $second)
 * @method self intlgregcal_set_gregorian_change(float $timestamp)
 * @method self intlgregcal_get_gregorian_change()
 * @method self intlgregcal_is_leap_year(int $year)
 * @method self collator_create()
 * @method self collator_compare(string $string1, string $string2)
 * @method self collator_get_attribute(int $attribute)
 * @method self collator_set_attribute(int $attribute, int $value)
 * @method self collator_get_strength()
 * @method self collator_set_strength(int $strength)
 * @method self collator_sort(array  &$array, int $flags = 0)
 * @method self collator_sort_with_sort_keys(array  &$array)
 * @method self collator_asort(array  &$array, int $flags = 0)
 * @method self collator_get_locale(int $type)
 * @method self collator_get_error_code()
 * @method self collator_get_error_message()
 * @method self collator_get_sort_key(string $string)
 * @method self intl_is_failure()
 * @method self intl_error_name()
 * @method self datefmt_create(int $dateType, int $timeType,  $timezone = null, IntlCalendar|int|null $calendar = null, ?string $pattern = null)
 * @method self datefmt_get_datetype()
 * @method self datefmt_get_timetype()
 * @method self datefmt_get_calendar()
 * @method self datefmt_set_calendar(IntlCalendar|int|null $calendar)
 * @method self datefmt_get_timezone_id()
 * @method self datefmt_get_calendar_object()
 * @method self datefmt_get_timezone()
 * @method self datefmt_set_timezone( $timezone)
 * @method self datefmt_set_pattern(string $pattern)
 * @method self datefmt_get_pattern()
 * @method self datefmt_get_locale(int $type = 0)
 * @method self datefmt_set_lenient(bool $lenient)
 * @method self datefmt_is_lenient()
 * @method self datefmt_format( $datetime)
 * @method self datefmt_format_object( $format = null, ?string $locale = null)
 * @method self datefmt_parse(string $string,   &$offset = null)
 * @method self datefmt_localtime(string $string,   &$offset = null)
 * @method self datefmt_get_error_code()
 * @method self datefmt_get_error_message()
 * @method self numfmt_create(int $style, ?string $pattern = null)
 * @method self numfmt_format(int|float $num, int $type = 0)
 * @method self numfmt_parse(string $string, int $type = 3,   &$offset = null)
 * @method self numfmt_format_currency(float $amount, string $currency)
 * @method self numfmt_parse_currency(string $string,   &$currency,   &$offset = null)
 * @method self numfmt_set_attribute(int $attribute, int|float $value)
 * @method self numfmt_get_attribute(int $attribute)
 * @method self numfmt_set_text_attribute(int $attribute, string $value)
 * @method self numfmt_get_text_attribute(int $attribute)
 * @method self numfmt_set_symbol(int $symbol, string $value)
 * @method self numfmt_get_symbol(int $symbol)
 * @method self numfmt_set_pattern(string $pattern)
 * @method self numfmt_get_pattern()
 * @method self numfmt_get_locale(int $type = 0)
 * @method self numfmt_get_error_code()
 * @method self numfmt_get_error_message()
 * @method self grapheme_strlen()
 * @method self grapheme_strpos(string $needle, int $offset = 0)
 * @method self grapheme_stripos(string $needle, int $offset = 0)
 * @method self grapheme_strrpos(string $needle, int $offset = 0)
 * @method self grapheme_strripos(string $needle, int $offset = 0)
 * @method self grapheme_substr(int $offset, ?int $length = null)
 * @method self grapheme_strstr(string $needle, bool $beforeNeedle = false)
 * @method self grapheme_stristr(string $needle, bool $beforeNeedle = false)
 * @method self grapheme_extract(int $size, int $type = 0, int $offset = 0,   &$next = null)
 * @method self idn_to_ascii(int $flags = 0, int $variant = 1,   &$idna_info = null)
 * @method self idn_to_utf8(int $flags = 0, int $variant = 1,   &$idna_info = null)
 * @method self locale_set_default()
 * @method self locale_get_primary_language()
 * @method self locale_get_script()
 * @method self locale_get_region()
 * @method self locale_get_keywords()
 * @method self locale_get_display_script(?string $displayLocale = null)
 * @method self locale_get_display_region(?string $displayLocale = null)
 * @method self locale_get_display_name(?string $displayLocale = null)
 * @method self locale_get_display_language(?string $displayLocale = null)
 * @method self locale_get_display_variant(?string $displayLocale = null)
 * @method self locale_compose()
 * @method self locale_parse()
 * @method self locale_get_all_variants()
 * @method self locale_filter_matches(string $locale, bool $canonicalize = false)
 * @method self locale_canonicalize()
 * @method self locale_lookup(string $locale, bool $canonicalize = false, ?string $defaultLocale = null)
 * @method self locale_accept_from_http()
 * @method self msgfmt_create(string $pattern)
 * @method self msgfmt_format(array $values)
 * @method self msgfmt_format_message(string $pattern, array $values)
 * @method self msgfmt_parse(string $string)
 * @method self msgfmt_parse_message(string $pattern, string $message)
 * @method self msgfmt_set_pattern(string $pattern)
 * @method self msgfmt_get_pattern()
 * @method self msgfmt_get_locale()
 * @method self msgfmt_get_error_code()
 * @method self msgfmt_get_error_message()
 * @method self normalizer_normalize(int $form = 16)
 * @method self normalizer_is_normalized(int $form = 16)
 * @method self normalizer_get_raw_decomposition(int $form = 16)
 * @method self resourcebundle_create(?string $bundle, bool $fallback = true)
 * @method self resourcebundle_get( $index, bool $fallback = true)
 * @method self resourcebundle_count()
 * @method self resourcebundle_locales()
 * @method self resourcebundle_get_error_code()
 * @method self resourcebundle_get_error_message()
 * @method self intltz_count_equivalent_ids()
 * @method self intltz_create_enumeration()
 * @method self intltz_create_time_zone()
 * @method self intltz_create_time_zone_id_enumeration(?string $region = null, ?int $rawOffset = null)
 * @method self intltz_from_date_time_zone()
 * @method self intltz_get_canonical_id(  &$isSystemId = null)
 * @method self intltz_get_display_name(bool $dst = false, int $style = 2, ?string $locale = null)
 * @method self intltz_get_dst_savings()
 * @method self intltz_get_equivalent_id(int $offset)
 * @method self intltz_get_error_code()
 * @method self intltz_get_error_message()
 * @method self intltz_get_id()
 * @method self intltz_get_offset(float $timestamp, bool $local,   &$rawOffset,   &$dstOffset)
 * @method self intltz_get_raw_offset()
 * @method self intltz_get_region()
 * @method self intltz_get_windows_id()
 * @method self intltz_get_id_for_windows_id(?string $region = null)
 * @method self intltz_has_same_rules(IntlTimeZone $other)
 * @method self intltz_to_date_time_zone()
 * @method self intltz_use_daylight_time()
 * @method self transliterator_create(int $direction = 0)
 * @method self transliterator_create_from_rules(int $direction = 0)
 * @method self transliterator_create_inverse()
 * @method self transliterator_transliterate(string $string, int $start = 0, int $end = -1)
 * @method self transliterator_get_error_code()
 * @method self transliterator_get_error_message()
 * @method self json_encode(int $flags = 0, int $depth = 512)
 * @method self json_decode(?bool $associative = null, int $depth = 512, int $flags = 0)
 * @method self ldap_connect(int $port = 389)
 * @method self ldap_unbind()
 * @method self ldap_close()
 * @method self ldap_bind(?string $dn = null, ?string $password = null)
 * @method self ldap_bind_ext(?string $dn = null, ?string $password = null, ?array $controls = null)
 * @method self ldap_sasl_bind(?string $dn = null, ?string $password = null, ?string $mech = null, ?string $realm = null, ?string $authc_id = null, ?string $authz_id = null, ?string $props = null)
 * @method self ldap_read(array|string $base, array|string $filter, array $attributes = [], int $attributes_only = 0, int $sizelimit = -1, int $timelimit = -1, int $deref = 0, ?array $controls = null)
 * @method self ldap_list(array|string $base, array|string $filter, array $attributes = [], int $attributes_only = 0, int $sizelimit = -1, int $timelimit = -1, int $deref = 0, ?array $controls = null)
 * @method self ldap_search(array|string $base, array|string $filter, array $attributes = [], int $attributes_only = 0, int $sizelimit = -1, int $timelimit = -1, int $deref = 0, ?array $controls = null)
 * @method self ldap_free_result()
 * @method self ldap_count_entries( $result)
 * @method self ldap_first_entry( $result)
 * @method self ldap_next_entry( $entry)
 * @method self ldap_get_entries( $result)
 * @method self ldap_first_attribute( $entry)
 * @method self ldap_next_attribute( $entry)
 * @method self ldap_get_attributes( $entry)
 * @method self ldap_get_values_len( $entry, string $attribute)
 * @method self ldap_get_values( $entry, string $attribute)
 * @method self ldap_get_dn( $entry)
 * @method self ldap_explode_dn(int $with_attrib)
 * @method self ldap_dn2ufn()
 * @method self ldap_add(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_add_ext(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_delete(string $dn, ?array $controls = null)
 * @method self ldap_delete_ext(string $dn, ?array $controls = null)
 * @method self ldap_modify_batch(string $dn, array $modifications_info, ?array $controls = null)
 * @method self ldap_mod_add(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_mod_add_ext(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_mod_replace(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_modify(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_mod_replace_ext(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_mod_del(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_mod_del_ext(string $dn, array $entry, ?array $controls = null)
 * @method self ldap_errno()
 * @method self ldap_error()
 * @method self ldap_err2str()
 * @method self ldap_compare(string $dn, string $attribute, string $value, ?array $controls = null)
 * @method self ldap_rename(string $dn, string $new_rdn, string $new_parent, bool $delete_old_rdn, ?array $controls = null)
 * @method self ldap_rename_ext(string $dn, string $new_rdn, string $new_parent, bool $delete_old_rdn, ?array $controls = null)
 * @method self ldap_get_option(int $option,   &$value = null)
 * @method self ldap_set_option(int $option,  $value)
 * @method self ldap_count_references( $result)
 * @method self ldap_first_reference( $result)
 * @method self ldap_next_reference( $entry)
 * @method self ldap_parse_reference( $entry,   &$referrals)
 * @method self ldap_parse_result( $result,   &$error_code,   &$matched_dn = null,   &$error_message = null,   &$referrals = null,   &$controls = null)
 * @method self ldap_set_rebind_proc(?callable $callback)
 * @method self ldap_start_tls()
 * @method self ldap_escape(string $ignore = "", int $flags = 0)
 * @method self ldap_exop(string $request_oid, ?string $request_data = null, ?array $controls = null,   &$response_data,   &$response_oid = null)
 * @method self ldap_exop_passwd(string $user = "", string $old_password = "", string $new_password = "",   &$controls = null)
 * @method self ldap_exop_whoami()
 * @method self ldap_exop_refresh(string $dn, int $ttl)
 * @method self ldap_parse_exop( $result,   &$response_data = null,   &$response_oid = null)
 * @method self mb_language()
 * @method self mb_internal_encoding()
 * @method self mb_http_input()
 * @method self mb_http_output()
 * @method self mb_detect_order()
 * @method self mb_substitute_character()
 * @method self mb_preferred_mime_name()
 * @method self mb_parse_str(  &$result)
 * @method self mb_output_handler(int $status)
 * @method self mb_str_split(int $length = 1, ?string $encoding = null)
 * @method self mb_strlen(?string $encoding = null)
 * @method self mb_strpos(string $needle, int $offset = 0, ?string $encoding = null)
 * @method self mb_strrpos(string $needle, int $offset = 0, ?string $encoding = null)
 * @method self mb_stripos(string $needle, int $offset = 0, ?string $encoding = null)
 * @method self mb_strripos(string $needle, int $offset = 0, ?string $encoding = null)
 * @method self mb_strstr(string $needle, bool $before_needle = false, ?string $encoding = null)
 * @method self mb_strrchr(string $needle, bool $before_needle = false, ?string $encoding = null)
 * @method self mb_stristr(string $needle, bool $before_needle = false, ?string $encoding = null)
 * @method self mb_strrichr(string $needle, bool $before_needle = false, ?string $encoding = null)
 * @method self mb_substr_count(string $needle, ?string $encoding = null)
 * @method self mb_substr(int $start, ?int $length = null, ?string $encoding = null)
 * @method self mb_strcut(int $start, ?int $length = null, ?string $encoding = null)
 * @method self mb_strwidth(?string $encoding = null)
 * @method self mb_strimwidth(int $start, int $width, string $trim_marker = "", ?string $encoding = null)
 * @method self mb_convert_encoding(string $to_encoding, array|string|null $from_encoding = null)
 * @method self mb_convert_case(int $mode, ?string $encoding = null)
 * @method self mb_strtoupper(?string $encoding = null)
 * @method self mb_strtolower(?string $encoding = null)
 * @method self mb_detect_encoding(array|string|null $encodings = null, bool $strict = false)
 * @method self mb_encoding_aliases()
 * @method self mb_encode_mimeheader(?string $charset = null, ?string $transfer_encoding = null, string $newline = "\r\n", int $indent = 0)
 * @method self mb_decode_mimeheader()
 * @method self mb_convert_kana(string $mode = "KV", ?string $encoding = null)
 * @method self mb_convert_variables(array|string $from_encoding, mixed  &$var, mixed  &$vars)
 * @method self mb_encode_numericentity(array $map, ?string $encoding = null, bool $hex = false)
 * @method self mb_decode_numericentity(array $map, ?string $encoding = null)
 * @method self mb_send_mail(string $subject, string $message, array|string $additional_headers = [], ?string $additional_params = null)
 * @method self mb_get_info()
 * @method self mb_check_encoding(?string $encoding = null)
 * @method self mb_scrub(?string $encoding = null)
 * @method self mb_ord(?string $encoding = null)
 * @method self mb_chr(?string $encoding = null)
 * @method self mb_regex_encoding()
 * @method self mb_ereg(string $string,   &$matches = null)
 * @method self mb_eregi(string $string,   &$matches = null)
 * @method self mb_ereg_replace(string $replacement, string $string, ?string $options = null)
 * @method self mb_eregi_replace(string $replacement, string $string, ?string $options = null)
 * @method self mb_ereg_replace_callback(callable $callback, string $string, ?string $options = null)
 * @method self mb_split(string $string, int $limit = -1)
 * @method self mb_ereg_match(string $string, ?string $options = null)
 * @method self mb_ereg_search(?string $options = null)
 * @method self mb_ereg_search_pos(?string $options = null)
 * @method self mb_ereg_search_regs(?string $options = null)
 * @method self mb_ereg_search_init(?string $pattern = null, ?string $options = null)
 * @method self mb_ereg_search_setpos()
 * @method self mb_regex_set_options()
 * @method self mysqli_affected_rows()
 * @method self mysqli_autocommit(bool $enable)
 * @method self mysqli_begin_transaction(int $flags = 0, ?string $name = null)
 * @method self mysqli_change_user(string $username, string $password, ?string $database)
 * @method self mysqli_character_set_name()
 * @method self mysqli_close()
 * @method self mysqli_commit(int $flags = 0, ?string $name = null)
 * @method self mysqli_connect(?string $username = null, ?string $password = null, ?string $database = null, ?int $port = null, ?string $socket = null)
 * @method self mysqli_data_seek(int $offset)
 * @method self mysqli_dump_debug_info()
 * @method self mysqli_debug()
 * @method self mysqli_errno()
 * @method self mysqli_error()
 * @method self mysqli_error_list()
 * @method self mysqli_stmt_execute()
 * @method self mysqli_execute()
 * @method self mysqli_fetch_field()
 * @method self mysqli_fetch_fields()
 * @method self mysqli_fetch_field_direct(int $index)
 * @method self mysqli_fetch_lengths()
 * @method self mysqli_fetch_all(int $mode = 2)
 * @method self mysqli_fetch_array(int $mode = 3)
 * @method self mysqli_fetch_assoc()
 * @method self mysqli_fetch_object(string $class = "stdClass", array $constructor_args = [])
 * @method self mysqli_fetch_row()
 * @method self mysqli_field_count()
 * @method self mysqli_field_seek(int $index)
 * @method self mysqli_field_tell()
 * @method self mysqli_free_result()
 * @method self mysqli_get_connection_stats()
 * @method self mysqli_get_charset()
 * @method self mysqli_get_client_info()
 * @method self mysqli_get_host_info()
 * @method self mysqli_get_proto_info()
 * @method self mysqli_get_server_info()
 * @method self mysqli_get_server_version()
 * @method self mysqli_get_warnings()
 * @method self mysqli_info()
 * @method self mysqli_insert_id()
 * @method self mysqli_kill(int $process_id)
 * @method self mysqli_more_results()
 * @method self mysqli_multi_query(string $query)
 * @method self mysqli_next_result()
 * @method self mysqli_num_fields()
 * @method self mysqli_num_rows()
 * @method self mysqli_options(int $option,  $value)
 * @method self mysqli_set_opt(int $option,  $value)
 * @method self mysqli_ping()
 * @method self mysqli_poll(?array  &$error, array  &$reject, int $seconds, int $microseconds = 0)
 * @method self mysqli_prepare(string $query)
 * @method self mysqli_report()
 * @method self mysqli_query(string $query, int $result_mode = 0)
 * @method self mysqli_real_connect(?string $hostname = null, ?string $username = null, ?string $password = null, ?string $database = null, ?int $port = null, ?string $socket = null, int $flags = 0)
 * @method self mysqli_real_escape_string(string $string)
 * @method self mysqli_escape_string(string $string)
 * @method self mysqli_real_query(string $query)
 * @method self mysqli_reap_async_query()
 * @method self mysqli_release_savepoint(string $name)
 * @method self mysqli_rollback(int $flags = 0, ?string $name = null)
 * @method self mysqli_savepoint(string $name)
 * @method self mysqli_select_db(string $database)
 * @method self mysqli_set_charset(string $charset)
 * @method self mysqli_stmt_affected_rows()
 * @method self mysqli_stmt_attr_get(int $attribute)
 * @method self mysqli_stmt_attr_set(int $attribute, int $value)
 * @method self mysqli_stmt_bind_param(string $types, mixed  &$vars)
 * @method self mysqli_stmt_bind_result(mixed  &$vars)
 * @method self mysqli_stmt_close()
 * @method self mysqli_stmt_data_seek(int $offset)
 * @method self mysqli_stmt_errno()
 * @method self mysqli_stmt_error()
 * @method self mysqli_stmt_error_list()
 * @method self mysqli_stmt_fetch()
 * @method self mysqli_stmt_field_count()
 * @method self mysqli_stmt_free_result()
 * @method self mysqli_stmt_get_result()
 * @method self mysqli_stmt_get_warnings()
 * @method self mysqli_stmt_init()
 * @method self mysqli_stmt_insert_id()
 * @method self mysqli_stmt_more_results()
 * @method self mysqli_stmt_next_result()
 * @method self mysqli_stmt_num_rows()
 * @method self mysqli_stmt_param_count()
 * @method self mysqli_stmt_prepare(string $query)
 * @method self mysqli_stmt_reset()
 * @method self mysqli_stmt_result_metadata()
 * @method self mysqli_stmt_send_long_data(int $param_num, string $data)
 * @method self mysqli_stmt_store_result()
 * @method self mysqli_stmt_sqlstate()
 * @method self mysqli_sqlstate()
 * @method self mysqli_ssl_set(?string $key, ?string $certificate, ?string $ca_certificate, ?string $ca_path, ?string $cipher_algos)
 * @method self mysqli_stat()
 * @method self mysqli_store_result(int $mode = 0)
 * @method self mysqli_thread_id()
 * @method self mysqli_use_result()
 * @method self mysqli_warning_count()
 * @method self mysqli_refresh(int $flags)
 * @method self odbc_binmode(int $mode)
 * @method self odbc_longreadlen(int $length)
 * @method self odbc_prepare(string $query)
 * @method self odbc_execute(array $params = [])
 * @method self odbc_cursor()
 * @method self odbc_data_source(int $fetch_type)
 * @method self odbc_exec(string $query)
 * @method self odbc_do(string $query)
 * @method self odbc_fetch_object(int $row = -1)
 * @method self odbc_fetch_array(int $row = -1)
 * @method self odbc_fetch_into(  &$array, int $row = 0)
 * @method self odbc_fetch_row(?int $row = null)
 * @method self odbc_result(string|int $field)
 * @method self odbc_result_all(string $format = "")
 * @method self odbc_free_result()
 * @method self odbc_connect(string $user, string $password, int $cursor_option = 2)
 * @method self odbc_pconnect(string $user, string $password, int $cursor_option = 2)
 * @method self odbc_close()
 * @method self odbc_num_rows()
 * @method self odbc_next_result()
 * @method self odbc_num_fields()
 * @method self odbc_field_name(int $field)
 * @method self odbc_field_type(int $field)
 * @method self odbc_field_len(int $field)
 * @method self odbc_field_precision(int $field)
 * @method self odbc_field_scale(int $field)
 * @method self odbc_field_num(string $field)
 * @method self odbc_autocommit(bool $enable = false)
 * @method self odbc_commit()
 * @method self odbc_rollback()
 * @method self odbc_error()
 * @method self odbc_errormsg()
 * @method self odbc_setoption(int $which, int $option, int $value)
 * @method self odbc_tables(?string $catalog = null, ?string $schema = null, ?string $table = null, ?string $types = null)
 * @method self odbc_columns(?string $catalog = null, ?string $schema = null, ?string $table = null, ?string $column = null)
 * @method self odbc_gettypeinfo(int $data_type = 0)
 * @method self odbc_primarykeys(?string $catalog, string $schema, string $table)
 * @method self odbc_procedurecolumns(?string $catalog = null, ?string $schema = null, ?string $procedure = null, ?string $column = null)
 * @method self odbc_procedures(?string $catalog = null, ?string $schema = null, ?string $procedure = null)
 * @method self odbc_foreignkeys(?string $pk_catalog, string $pk_schema, string $pk_table, string $fk_catalog, string $fk_schema, string $fk_table)
 * @method self odbc_specialcolumns(int $type, ?string $catalog, string $schema, string $table, int $scope, int $nullable)
 * @method self odbc_statistics(?string $catalog, string $schema, string $table, int $unique, int $accuracy)
 * @method self odbc_tableprivileges(?string $catalog, string $schema, string $table)
 * @method self odbc_columnprivileges(?string $catalog, string $schema, string $table, string $column)
 * @method self pcntl_waitpid(  &$status, int $flags = 0,   &$resource_usage = [])
 * @method self pcntl_wait(int $flags = 0,   &$resource_usage = [])
 * @method self pcntl_signal( $handler, bool $restart_syscalls = true)
 * @method self pcntl_signal_get_handler()
 * @method self pcntl_sigprocmask(array $signals,   &$old_signals = null)
 * @method self pcntl_wifexited()
 * @method self pcntl_wifstopped()
 * @method self pcntl_wifcontinued()
 * @method self pcntl_wifsignaled()
 * @method self pcntl_wexitstatus()
 * @method self pcntl_wtermsig()
 * @method self pcntl_wstopsig()
 * @method self pcntl_exec(array $args = [], array $env_vars = [])
 * @method self pcntl_alarm()
 * @method self pcntl_getpriority(int $mode = 0)
 * @method self pcntl_setpriority(?int $process_id = null, int $mode = 0)
 * @method self pcntl_strerror()
 * @method self pcntl_async_signals()
 * @method self class_implements(bool $autoload = true)
 * @method self class_parents(bool $autoload = true)
 * @method self class_uses(bool $autoload = true)
 * @method self spl_autoload(?string $file_extensions = null)
 * @method self spl_autoload_call()
 * @method self spl_autoload_extensions()
 * @method self spl_autoload_register(bool $throw = true, bool $prepend = false)
 * @method self spl_autoload_unregister()
 * @method self spl_object_hash()
 * @method self spl_object_id()
 * @method self iterator_apply(callable $callback, ?array $args = null)
 * @method self iterator_count()
 * @method self iterator_to_array(bool $preserve_keys = true)
 * @method self pg_connect(int $flags = 0)
 * @method self pg_pconnect(int $flags = 0)
 * @method self pg_connect_poll()
 * @method self pg_close()
 * @method self pg_dbname()
 * @method self pg_last_error()
 * @method self pg_errormessage()
 * @method self pg_options()
 * @method self pg_port()
 * @method self pg_tty()
 * @method self pg_host()
 * @method self pg_version()
 * @method self pg_parameter_status(string $name)
 * @method self pg_ping()
 * @method self pg_query(string $query)
 * @method self pg_exec(string $query)
 * @method self pg_query_params( $query, array $params)
 * @method self pg_prepare(string $statement_name, string $query)
 * @method self pg_execute( $statement_name, array $params)
 * @method self pg_num_rows()
 * @method self pg_numrows()
 * @method self pg_num_fields()
 * @method self pg_numfields()
 * @method self pg_affected_rows()
 * @method self pg_cmdtuples()
 * @method self pg_last_notice(int $mode = 1)
 * @method self pg_field_table(int $field, bool $oid_only = false)
 * @method self pg_field_name(int $field)
 * @method self pg_fieldname(int $field)
 * @method self pg_field_size(int $field)
 * @method self pg_fieldsize(int $field)
 * @method self pg_field_type(int $field)
 * @method self pg_fieldtype(int $field)
 * @method self pg_field_type_oid(int $field)
 * @method self pg_field_num(string $field)
 * @method self pg_fieldnum(string $field)
 * @method self pg_fetch_result( $row, string|int $field)
 * @method self pg_result( $row, string|int $field)
 * @method self pg_fetch_row(?int $row = null, int $mode = 2)
 * @method self pg_fetch_assoc(?int $row = null)
 * @method self pg_fetch_array(?int $row = null, int $mode = 3)
 * @method self pg_fetch_object(?int $row = null, string $class = "stdClass", array $constructor_args = [])
 * @method self pg_fetch_all(int $mode = 1)
 * @method self pg_fetch_all_columns(int $field = 0)
 * @method self pg_result_seek(int $row)
 * @method self pg_field_prtlen( $row, string|int $field)
 * @method self pg_fieldprtlen( $row, string|int $field)
 * @method self pg_field_is_null( $row, string|int $field)
 * @method self pg_fieldisnull( $row, string|int $field)
 * @method self pg_free_result()
 * @method self pg_freeresult()
 * @method self pg_last_oid()
 * @method self pg_getlastoid()
 * @method self pg_trace(string $mode = "w",  $connection = null)
 * @method self pg_untrace()
 * @method self pg_lo_create( $oid)
 * @method self pg_locreate( $oid)
 * @method self pg_lo_unlink( $oid)
 * @method self pg_lounlink( $oid)
 * @method self pg_lo_open( $oid, string $mode)
 * @method self pg_loopen( $oid, string $mode)
 * @method self pg_lo_close()
 * @method self pg_loclose()
 * @method self pg_lo_read(int $length = 8192)
 * @method self pg_loread(int $length = 8192)
 * @method self pg_lo_write(string $data, ?int $length = null)
 * @method self pg_lowrite(string $data, ?int $length = null)
 * @method self pg_lo_read_all()
 * @method self pg_loreadall()
 * @method self pg_lo_import( $filename,  $oid)
 * @method self pg_loimport( $filename,  $oid)
 * @method self pg_lo_export( $oid,  $filename)
 * @method self pg_loexport( $oid,  $filename)
 * @method self pg_lo_seek(int $offset, int $whence = 1)
 * @method self pg_lo_tell()
 * @method self pg_lo_truncate(int $size)
 * @method self pg_set_error_verbosity(int $verbosity)
 * @method self pg_set_client_encoding(string $encoding)
 * @method self pg_setclientencoding(string $encoding)
 * @method self pg_client_encoding()
 * @method self pg_clientencoding()
 * @method self pg_end_copy()
 * @method self pg_put_line(string $query)
 * @method self pg_copy_to(string $table_name, string $separator = "\t", string $null_as = "\\\\N")
 * @method self pg_copy_from(string $table_name, array $rows, string $separator = "\t", string $null_as = "\\\\N")
 * @method self pg_escape_string(string $string)
 * @method self pg_escape_bytea(string $string)
 * @method self pg_unescape_bytea()
 * @method self pg_escape_literal(string $string)
 * @method self pg_escape_identifier(string $string)
 * @method self pg_result_error()
 * @method self pg_result_error_field(int $field_code)
 * @method self pg_connection_status()
 * @method self pg_transaction_status()
 * @method self pg_connection_reset()
 * @method self pg_cancel_query()
 * @method self pg_connection_busy()
 * @method self pg_send_query(string $query)
 * @method self pg_send_query_params(string $query, array $params)
 * @method self pg_send_prepare(string $statement_name, string $query)
 * @method self pg_send_execute(string $statement_name, array $params)
 * @method self pg_get_result()
 * @method self pg_result_status(int $mode = 1)
 * @method self pg_get_notify(int $mode = 1)
 * @method self pg_get_pid()
 * @method self pg_socket()
 * @method self pg_consume_input()
 * @method self pg_flush()
 * @method self pg_meta_data(string $table_name, bool $extended = false)
 * @method self pg_convert(string $table_name, array $values, int $flags = 0)
 * @method self pg_insert(string $table_name, array $values, int $flags = 512)
 * @method self pg_update(string $table_name, array $values, array $conditions, int $flags = 512)
 * @method self pg_delete(string $table_name, array $conditions, int $flags = 512)
 * @method self pg_select(string $table_name, array $conditions, int $flags = 512, int $mode = 1)
 * @method self posix_kill(int $signal)
 * @method self posix_setuid()
 * @method self posix_seteuid()
 * @method self posix_setgid()
 * @method self posix_setegid()
 * @method self posix_setpgid(int $process_group_id)
 * @method self posix_getpgid()
 * @method self posix_getsid()
 * @method self posix_ttyname()
 * @method self posix_isatty()
 * @method self posix_mkfifo(int $permissions)
 * @method self posix_mknod(int $flags, int $major = 0, int $minor = 0)
 * @method self posix_access(int $flags = 0)
 * @method self posix_getgrnam()
 * @method self posix_getgrgid()
 * @method self posix_getpwnam()
 * @method self posix_getpwuid()
 * @method self posix_setrlimit(int $soft_limit, int $hard_limit)
 * @method self posix_strerror()
 * @method self posix_initgroups(int $group_id)
 * @method self pspell_new(string $spelling = "", string $jargon = "", string $encoding = "", int $mode = 0)
 * @method self pspell_new_personal(string $language, string $spelling = "", string $jargon = "", string $encoding = "", int $mode = 0)
 * @method self pspell_new_config()
 * @method self pspell_check(string $word)
 * @method self pspell_suggest(string $word)
 * @method self pspell_store_replacement(string $misspelled, string $correct)
 * @method self pspell_add_to_personal(string $word)
 * @method self pspell_add_to_session(string $word)
 * @method self pspell_clear_session()
 * @method self pspell_save_wordlist()
 * @method self pspell_config_create(string $spelling = "", string $jargon = "", string $encoding = "")
 * @method self pspell_config_runtogether(bool $allow)
 * @method self pspell_config_mode(int $mode)
 * @method self pspell_config_ignore(int $min_length)
 * @method self pspell_config_personal(string $filename)
 * @method self pspell_config_dict_dir(string $directory)
 * @method self pspell_config_data_dir(string $directory)
 * @method self pspell_config_repl(string $filename)
 * @method self pspell_config_save_repl(bool $save)
 * @method self readline()
 * @method self readline_info( $value = null)
 * @method self readline_add_history()
 * @method self readline_read_history()
 * @method self readline_write_history()
 * @method self readline_completion_function()
 * @method self readline_callback_handler_install(callable $callback)
 * @method self session_name()
 * @method self session_module_name()
 * @method self session_save_path()
 * @method self session_id()
 * @method self session_create_id()
 * @method self session_regenerate_id()
 * @method self session_decode()
 * @method self session_set_save_handler( $close, callable $read, callable $write, callable $destroy, callable $gc, callable $create_sid, callable $validate_sid, callable $update_timestamp)
 * @method self session_cache_limiter()
 * @method self session_cache_expire()
 * @method self session_set_cookie_params(?string $path = null, ?string $domain = null, ?bool $secure = null, ?bool $httponly = null)
 * @method self session_start()
 * @method self shmop_open(string $mode, int $permissions, int $size)
 * @method self shmop_read(int $offset, int $size)
 * @method self shmop_close()
 * @method self shmop_size()
 * @method self shmop_write(string $data, int $offset)
 * @method self shmop_delete()
 * @method self simplexml_load_file(?string $class_name = "SimpleXMLElement", int $options = 0, string $namespace_or_prefix = "", bool $is_prefix = false)
 * @method self simplexml_load_string(?string $class_name = "SimpleXMLElement", int $options = 0, string $namespace_or_prefix = "", bool $is_prefix = false)
 * @method self simplexml_import_dom(?string $class_name = "SimpleXMLElement")
 * @method self use_soap_error_handler()
 * @method self is_soap_fault()
 * @method self socket_select(?array  &$write, ?array  &$except, ?int $seconds, int $microseconds = 0)
 * @method self socket_create_listen(int $backlog = 128)
 * @method self socket_accept()
 * @method self socket_set_nonblock()
 * @method self socket_set_block()
 * @method self socket_listen(int $backlog = 0)
 * @method self socket_close()
 * @method self socket_write(string $data, ?int $length = null)
 * @method self socket_read(int $length, int $mode = 2)
 * @method self socket_getsockname(  &$address,   &$port = null)
 * @method self socket_getpeername(  &$address,   &$port = null)
 * @method self socket_create(int $type, int $protocol)
 * @method self socket_connect(string $address, ?int $port = null)
 * @method self socket_strerror()
 * @method self socket_bind(string $address, int $port = 0)
 * @method self socket_recv(  &$data, int $length, int $flags)
 * @method self socket_send(string $data, int $length, int $flags)
 * @method self socket_recvfrom(  &$data, int $length, int $flags,   &$address,   &$port = null)
 * @method self socket_sendto(string $data, int $length, int $flags, string $address, ?int $port = null)
 * @method self socket_get_option(int $level, int $option)
 * @method self socket_getopt(int $level, int $option)
 * @method self socket_set_option(int $level, int $option,  $value)
 * @method self socket_setopt(int $level, int $option,  $value)
 * @method self socket_create_pair(int $type, int $protocol,   &$pair)
 * @method self socket_shutdown(int $mode = 2)
 * @method self socket_last_error()
 * @method self socket_clear_error()
 * @method self socket_import_stream()
 * @method self socket_export_stream()
 * @method self socket_sendmsg(array $message, int $flags = 0)
 * @method self socket_recvmsg(array  &$message, int $flags = 0)
 * @method self socket_cmsg_space(int $type, int $num = 0)
 * @method self socket_addrinfo_lookup(?string $service = null, array $hints = [])
 * @method self socket_addrinfo_connect()
 * @method self socket_addrinfo_bind()
 * @method self socket_addrinfo_explain()
 * @method self sodium_crypto_aead_aes256gcm_decrypt(string $additional_data, string $nonce, string $key)
 * @method self sodium_crypto_aead_aes256gcm_encrypt(string $additional_data, string $nonce, string $key)
 * @method self sodium_crypto_aead_chacha20poly1305_decrypt(string $additional_data, string $nonce, string $key)
 * @method self sodium_crypto_aead_chacha20poly1305_encrypt(string $additional_data, string $nonce, string $key)
 * @method self sodium_crypto_aead_chacha20poly1305_ietf_decrypt(string $additional_data, string $nonce, string $key)
 * @method self sodium_crypto_aead_chacha20poly1305_ietf_encrypt(string $additional_data, string $nonce, string $key)
 * @method self sodium_crypto_aead_xchacha20poly1305_ietf_decrypt(string $additional_data, string $nonce, string $key)
 * @method self sodium_crypto_aead_xchacha20poly1305_ietf_encrypt(string $additional_data, string $nonce, string $key)
 * @method self sodium_crypto_auth(string $key)
 * @method self sodium_crypto_auth_verify(string $message, string $key)
 * @method self sodium_crypto_box(string $nonce, string $key_pair)
 * @method self sodium_crypto_box_seed_keypair()
 * @method self sodium_crypto_box_keypair_from_secretkey_and_publickey(string $public_key)
 * @method self sodium_crypto_box_open(string $nonce, string $key_pair)
 * @method self sodium_crypto_box_publickey()
 * @method self sodium_crypto_box_publickey_from_secretkey()
 * @method self sodium_crypto_box_seal(string $public_key)
 * @method self sodium_crypto_box_seal_open(string $key_pair)
 * @method self sodium_crypto_box_secretkey()
 * @method self sodium_crypto_kx_publickey()
 * @method self sodium_crypto_kx_secretkey()
 * @method self sodium_crypto_kx_seed_keypair()
 * @method self sodium_crypto_kx_client_session_keys(string $server_key)
 * @method self sodium_crypto_kx_server_session_keys(string $client_key)
 * @method self sodium_crypto_generichash(string $key = "", int $length = 32)
 * @method self sodium_crypto_generichash_init(int $length = 32)
 * @method self sodium_crypto_generichash_update(string $message)
 * @method self sodium_crypto_generichash_final(int $length = 32)
 * @method self sodium_crypto_kdf_derive_from_key(int $subkey_id, string $context, string $key)
 * @method self sodium_crypto_pwhash(string $password, string $salt, int $opslimit, int $memlimit, int $algo = 2)
 * @method self sodium_crypto_pwhash_str(int $opslimit, int $memlimit)
 * @method self sodium_crypto_pwhash_str_verify(string $password)
 * @method self sodium_crypto_pwhash_str_needs_rehash(int $opslimit, int $memlimit)
 * @method self sodium_crypto_pwhash_scryptsalsa208sha256(string $password, string $salt, int $opslimit, int $memlimit)
 * @method self sodium_crypto_pwhash_scryptsalsa208sha256_str(int $opslimit, int $memlimit)
 * @method self sodium_crypto_pwhash_scryptsalsa208sha256_str_verify(string $password)
 * @method self sodium_crypto_scalarmult(string $p)
 * @method self sodium_crypto_secretbox(string $nonce, string $key)
 * @method self sodium_crypto_secretbox_open(string $nonce, string $key)
 * @method self sodium_crypto_secretstream_xchacha20poly1305_init_push()
 * @method self sodium_crypto_secretstream_xchacha20poly1305_push(string $message, string $additional_data = "", int $tag = 0)
 * @method self sodium_crypto_secretstream_xchacha20poly1305_init_pull(string $key)
 * @method self sodium_crypto_secretstream_xchacha20poly1305_pull(string $ciphertext, string $additional_data = "")
 * @method self sodium_crypto_secretstream_xchacha20poly1305_rekey()
 * @method self sodium_crypto_shorthash(string $key)
 * @method self sodium_crypto_sign(string $secret_key)
 * @method self sodium_crypto_sign_detached(string $secret_key)
 * @method self sodium_crypto_sign_ed25519_pk_to_curve25519()
 * @method self sodium_crypto_sign_ed25519_sk_to_curve25519()
 * @method self sodium_crypto_sign_keypair_from_secretkey_and_publickey(string $public_key)
 * @method self sodium_crypto_sign_open(string $public_key)
 * @method self sodium_crypto_sign_publickey()
 * @method self sodium_crypto_sign_secretkey()
 * @method self sodium_crypto_sign_publickey_from_secretkey()
 * @method self sodium_crypto_sign_seed_keypair()
 * @method self sodium_crypto_sign_verify_detached(string $message, string $public_key)
 * @method self sodium_crypto_stream(string $nonce, string $key)
 * @method self sodium_crypto_stream_xor(string $nonce, string $key)
 * @method self sodium_add(string $string2)
 * @method self sodium_compare(string $string2)
 * @method self sodium_increment()
 * @method self sodium_memcmp(string $string2)
 * @method self sodium_memzero()
 * @method self sodium_pad(int $block_size)
 * @method self sodium_unpad(int $block_size)
 * @method self sodium_bin2hex()
 * @method self sodium_hex2bin(string $ignore = "")
 * @method self sodium_bin2base64(int $id)
 * @method self sodium_base642bin(int $id, string $ignore = "")
 * @method self sodium_crypto_scalarmult_base()
 * @method self set_time_limit()
 * @method self header_register_callback()
 * @method self ob_start(int $chunk_size = 0, int $flags = 112)
 * @method self ob_get_status()
 * @method self ob_implicit_flush()
 * @method self output_add_rewrite_var(string $value)
 * @method self stream_wrapper_register(string $class, int $flags = 0)
 * @method self stream_register_wrapper(string $class, int $flags = 0)
 * @method self stream_wrapper_unregister()
 * @method self stream_wrapper_restore()
 * @method self array_push(mixed $values)
 * @method self krsort(int $flags = 0)
 * @method self ksort(int $flags = 0)
 * @method self count(int $mode = 0)
 * @method self sizeof(int $mode = 0)
 * @method self natsort()
 * @method self natcasesort()
 * @method self asort(int $flags = 0)
 * @method self arsort(int $flags = 0)
 * @method self sort(int $flags = 0)
 * @method self rsort(int $flags = 0)
 * @method self usort(callable $callback)
 * @method self uasort(callable $callback)
 * @method self uksort(callable $callback)
 * @method self end()
 * @method self prev()
 * @method self next()
 * @method self reset()
 * @method self current()
 * @method self pos()
 * @method self key()
 * @method self min(mixed $values)
 * @method self max(mixed $values)
 * @method self array_walk(callable $callback, mixed $arg)
 * @method self array_walk_recursive(callable $callback, mixed $arg)
 * @method self in_array(array $haystack, bool $strict = false)
 * @method self array_search(array $haystack, bool $strict = false)
 * @method self extract(int $flags = 0, string $prefix = "")
 * @method self compact( $var_names)
 * @method self array_fill(int $count, mixed $value)
 * @method self array_fill_keys(mixed $value)
 * @method self range( $end, int|float $step = 1)
 * @method self shuffle()
 * @method self array_pop()
 * @method self array_shift()
 * @method self array_unshift(mixed $values)
 * @method self array_splice(int $offset, ?int $length = null, mixed $replacement = [])
 * @method self array_slice(int $offset, ?int $length = null, bool $preserve_keys = false)
 * @method self array_merge()
 * @method self array_merge_recursive()
 * @method self array_replace(array $replacements)
 * @method self array_replace_recursive(array $replacements)
 * @method self array_keys(mixed $filter_value, bool $strict = false)
 * @method self array_key_first()
 * @method self array_key_last()
 * @method self array_values()
 * @method self array_count_values()
 * @method self array_column(string|int|null $column_key, string|int|null $index_key = null)
 * @method self array_reverse(bool $preserve_keys = false)
 * @method self array_pad(int $length, mixed $value)
 * @method self array_flip()
 * @method self array_change_key_case(int $case = 0)
 * @method self array_unique(int $flags = 2)
 * @method self array_intersect_key(array $arrays)
 * @method self array_intersect_ukey( $rest)
 * @method self array_intersect(array $arrays)
 * @method self array_uintersect( $rest)
 * @method self array_intersect_assoc(array $arrays)
 * @method self array_uintersect_assoc( $rest)
 * @method self array_intersect_uassoc( $rest)
 * @method self array_uintersect_uassoc( $rest)
 * @method self array_diff_key(array $arrays)
 * @method self array_diff_ukey( $rest)
 * @method self array_diff(array $arrays)
 * @method self array_udiff( $rest)
 * @method self array_diff_assoc(array $arrays)
 * @method self array_diff_uassoc( $rest)
 * @method self array_udiff_assoc( $rest)
 * @method self array_udiff_uassoc( $rest)
 * @method self array_multisort(  &$rest)
 * @method self array_rand(int $num = 1)
 * @method self array_sum()
 * @method self array_product()
 * @method self array_reduce(callable $callback, mixed $initial = null)
 * @method self array_filter(?callable $callback = null, int $mode = 0)
 * @method self array_map(array $array, array $arrays)
 * @method self array_key_exists(array $array)
 * @method self key_exists(array $array)
 * @method self array_chunk(int $length, bool $preserve_keys = false)
 * @method self array_combine(array $values)
 * @method self base64_encode()
 * @method self base64_decode(bool $strict = false)
 * @method self constant()
 * @method self ip2long()
 * @method self long2ip()
 * @method self getenv(bool $local_only = false)
 * @method self putenv()
 * @method self getopt(array $long_options = [],   &$rest_index = null)
 * @method self sleep()
 * @method self usleep()
 * @method self time_nanosleep(int $nanoseconds)
 * @method self time_sleep_until()
 * @method self get_cfg_var()
 * @method self error_log(int $message_type = 0, ?string $destination = null, ?string $additional_headers = null)
 * @method self call_user_func(mixed $args)
 * @method self call_user_func_array(array $args)
 * @method self forward_static_call(mixed $args)
 * @method self forward_static_call_array(array $args)
 * @method self register_shutdown_function(mixed $args)
 * @method self highlight_file(bool $return = false)
 * @method self show_source(bool $return = false)
 * @method self php_strip_whitespace()
 * @method self highlight_string(bool $return = false)
 * @method self ini_get()
 * @method self ini_get_all(bool $details = true)
 * @method self ini_set(string $value)
 * @method self ini_alter(string $value)
 * @method self ini_restore()
 * @method self set_include_path()
 * @method self print_r(bool $return = false)
 * @method self ignore_user_abort()
 * @method self getservbyname(string $protocol)
 * @method self getservbyport(string $protocol)
 * @method self getprotobyname()
 * @method self getprotobynumber()
 * @method self register_tick_function(mixed $args)
 * @method self unregister_tick_function()
 * @method self is_uploaded_file()
 * @method self move_uploaded_file(string $to)
 * @method self parse_ini_file(bool $process_sections = false, int $scanner_mode = 0)
 * @method self parse_ini_string(bool $process_sections = false, int $scanner_mode = 0)
 * @method self get_browser(bool $return_array = false)
 * @method self crc32()
 * @method self crypt(string $salt)
 * @method self strptime(string $format)
 * @method self gethostbyaddr()
 * @method self gethostbyname()
 * @method self gethostbynamel()
 * @method self dns_check_record(string $type = "MX")
 * @method self checkdnsrr(string $type = "MX")
 * @method self dns_get_record(int $type = 268435456,   &$authoritative_name_servers = null,   &$additional_records = null, bool $raw = false)
 * @method self dns_get_mx(  &$hosts,   &$weights = null)
 * @method self getmxrr(  &$hosts,   &$weights = null)
 * @method self ftok(string $project_id)
 * @method self hrtime()
 * @method self md5(bool $binary = false)
 * @method self md5_file(bool $binary = false)
 * @method self sha1(bool $binary = false)
 * @method self sha1_file(bool $binary = false)
 * @method self openlog(int $flags, int $facility)
 * @method self syslog(string $message)
 * @method self inet_ntop()
 * @method self inet_pton()
 * @method self metaphone(int $max_phonemes = 0)
 * @method self header(bool $replace = true, int $response_code = 0)
 * @method self header_remove()
 * @method self setrawcookie(string $value = "", array|int $expires_or_options = 0, string $path = "", string $domain = "", bool $secure = false, bool $httponly = false)
 * @method self setcookie(string $value = "", array|int $expires_or_options = 0, string $path = "", string $domain = "", bool $secure = false, bool $httponly = false)
 * @method self http_response_code()
 * @method self headers_sent(  &$line = null)
 * @method self htmlspecialchars(int $flags = 2, ?string $encoding = null, bool $double_encode = true)
 * @method self htmlspecialchars_decode(int $flags = 2)
 * @method self html_entity_decode(int $flags = 2, ?string $encoding = null)
 * @method self htmlentities(int $flags = 2, ?string $encoding = null, bool $double_encode = true)
 * @method self get_html_translation_table(int $flags = 2, string $encoding = "UTF-8")
 * @method self assert(Throwable|string|null $description = null)
 * @method self assert_options(mixed $value)
 * @method self bin2hex()
 * @method self hex2bin()
 * @method self strspn(string $characters, int $offset = 0, ?int $length = null)
 * @method self strcspn(string $characters, int $offset = 0, ?int $length = null)
 * @method self nl_langinfo()
 * @method self strcoll(string $string2)
 * @method self trim(string $characters = " \n\r\t\u000b\u0000")
 * @method self rtrim(string $characters = " \n\r\t\u000b\u0000")
 * @method self chop(string $characters = " \n\r\t\u000b\u0000")
 * @method self ltrim(string $characters = " \n\r\t\u000b\u0000")
 * @method self wordwrap(int $width = 75, string $break = "\n", bool $cut_long_words = false)
 * @method self explode(string $string, int $limit = 9223372036854775807)
 * @method self implode(?array $array = null)
 * @method self join(?array $array = null)
 * @method self strtok(?string $token = null)
 * @method self strtoupper()
 * @method self strtolower()
 * @method self basename(string $suffix = "")
 * @method self dirname(int $levels = 1)
 * @method self pathinfo(int $flags = 15)
 * @method self stristr(string $needle, bool $before_needle = false)
 * @method self strstr(string $needle, bool $before_needle = false)
 * @method self strchr(string $needle, bool $before_needle = false)
 * @method self strpos(string $needle, int $offset = 0)
 * @method self stripos(string $needle, int $offset = 0)
 * @method self strrpos(string $needle, int $offset = 0)
 * @method self strripos(string $needle, int $offset = 0)
 * @method self strrchr(string $needle)
 * @method self str_contains(string $needle)
 * @method self str_starts_with(string $needle)
 * @method self str_ends_with(string $needle)
 * @method self chunk_split(int $length = 76, string $separator = "\r\n")
 * @method self substr(int $offset, ?int $length = null)
 * @method self substr_replace(array|string $replace, array|int $offset, array|int|null $length = null)
 * @method self quotemeta()
 * @method self ord()
 * @method self chr()
 * @method self ucfirst()
 * @method self lcfirst()
 * @method self ucwords(string $separators = " \t\r\n\f\u000b")
 * @method self strtr(array|string $from, ?string $to = null)
 * @method self strrev()
 * @method self similar_text(string $string2,   &$percent = null)
 * @method self addcslashes(string $characters)
 * @method self addslashes()
 * @method self stripcslashes()
 * @method self stripslashes()
 * @method self str_replace(array|string $replace, array|string $subject,   &$count = null)
 * @method self str_ireplace(array|string $replace, array|string $subject,   &$count = null)
 * @method self hebrev(int $max_chars_per_line = 0)
 * @method self nl2br(bool $use_xhtml = true)
 * @method self strip_tags(array|string|null $allowed_tags = null)
 * @method self setlocale( $locales,  $rest)
 * @method self parse_str(  &$result)
 * @method self str_getcsv(string $separator = ",", string $enclosure = "\"", string $escape = "\\")
 * @method self str_repeat(int $times)
 * @method self count_chars(int $mode = 0)
 * @method self strnatcmp(string $string2)
 * @method self strnatcasecmp(string $string2)
 * @method self substr_count(string $needle, int $offset = 0, ?int $length = null)
 * @method self str_pad(int $length, string $pad_string = " ", int $pad_type = 1)
 * @method self sscanf(string $format, mixed  &$vars)
 * @method self str_rot13()
 * @method self str_shuffle()
 * @method self str_word_count(int $format = 0, ?string $characters = null)
 * @method self str_split(int $length = 1)
 * @method self strpbrk(string $characters)
 * @method self substr_compare(string $needle, int $offset, ?int $length = null, bool $case_insensitive = false)
 * @method self utf8_encode()
 * @method self utf8_decode()
 * @method self opendir( $context = null)
 * @method self dir( $context = null)
 * @method self closedir()
 * @method self chdir()
 * @method self rewinddir()
 * @method self readdir()
 * @method self scandir(int $sorting_order = 0,  $context = null)
 * @method self glob(int $flags = 0)
 * @method self exec(  &$output = null,   &$result_code = null)
 * @method self system(  &$result_code = null)
 * @method self passthru(  &$result_code = null)
 * @method self escapeshellcmd()
 * @method self escapeshellarg()
 * @method self shell_exec()
 * @method self proc_nice()
 * @method self flock(int $operation,   &$would_block = null)
 * @method self get_meta_tags(bool $use_include_path = false)
 * @method self pclose()
 * @method self popen(string $mode)
 * @method self readfile(bool $use_include_path = false,  $context = null)
 * @method self rewind()
 * @method self rmdir( $context = null)
 * @method self umask()
 * @method self fclose()
 * @method self feof()
 * @method self fgetc()
 * @method self fgets(?int $length = null)
 * @method self fread(int $length)
 * @method self fopen(string $mode, bool $use_include_path = false,  $context = null)
 * @method self fscanf(string $format, mixed  &$vars)
 * @method self fpassthru()
 * @method self ftruncate(int $size)
 * @method self fstat()
 * @method self fseek(int $offset, int $whence = 0)
 * @method self ftell()
 * @method self fflush()
 * @method self fwrite(string $data, ?int $length = null)
 * @method self fputs(string $data, ?int $length = null)
 * @method self mkdir(int $permissions = 511, bool $recursive = false,  $context = null)
 * @method self rename(string $to,  $context = null)
 * @method self copy(string $to,  $context = null)
 * @method self tempnam(string $prefix)
 * @method self file(int $flags = 0,  $context = null)
 * @method self file_get_contents(bool $use_include_path = false,  $context = null, int $offset = 0, ?int $length = null)
 * @method self unlink( $context = null)
 * @method self file_put_contents(mixed $data, int $flags = 0,  $context = null)
 * @method self fputcsv(array $fields, string $separator = ",", string $enclosure = "\"", string $escape = "\\")
 * @method self fgetcsv(?int $length = null, string $separator = ",", string $enclosure = "\"", string $escape = "\\")
 * @method self realpath()
 * @method self fnmatch(string $filename, int $flags = 0)
 * @method self fileatime()
 * @method self filectime()
 * @method self filegroup()
 * @method self fileinode()
 * @method self filemtime()
 * @method self fileowner()
 * @method self fileperms()
 * @method self filesize()
 * @method self filetype()
 * @method self file_exists()
 * @method self is_writable()
 * @method self is_writeable()
 * @method self is_readable()
 * @method self is_executable()
 * @method self is_file()
 * @method self is_dir()
 * @method self is_link()
 * @method self stat()
 * @method self lstat()
 * @method self chown(string|int $user)
 * @method self chgrp(string|int $group)
 * @method self lchown(string|int $user)
 * @method self lchgrp(string|int $group)
 * @method self chmod(int $permissions)
 * @method self touch(?int $mtime = null, ?int $atime = null)
 * @method self clearstatcache(string $filename = "")
 * @method self disk_total_space()
 * @method self disk_free_space()
 * @method self diskfreespace()
 * @method self sprintf(mixed $values)
 * @method self printf(mixed $values)
 * @method self vprintf(array $values)
 * @method self vsprintf(array $values)
 * @method self fprintf(string $format, mixed $values)
 * @method self vfprintf(string $format, array $values)
 * @method self fsockopen(int $port = -1,   &$error_code = null,   &$error_message = null, ?float $timeout = null)
 * @method self pfsockopen(int $port = -1,   &$error_code = null,   &$error_message = null, ?float $timeout = null)
 * @method self http_build_query(string $numeric_prefix = "", ?string $arg_separator = null, int $encoding_type = 1)
 * @method self image_type_to_mime_type()
 * @method self image_type_to_extension(bool $include_dot = true)
 * @method self getimagesize(  &$image_info = null)
 * @method self getimagesizefromstring(  &$image_info = null)
 * @method self phpinfo()
 * @method self phpversion()
 * @method self phpcredits()
 * @method self php_uname()
 * @method self iptcembed(string $filename, int $spool = 0)
 * @method self iptcparse()
 * @method self levenshtein(string $string2, int $insertion_cost = 1, int $replacement_cost = 1, int $deletion_cost = 1)
 * @method self readlink()
 * @method self linkinfo()
 * @method self symlink(string $link)
 * @method self link(string $link)
 * @method self mail(string $subject, string $message, array|string $additional_headers = [], string $additional_params = "")
 * @method self abs()
 * @method self ceil()
 * @method self floor()
 * @method self round(int $precision = 0, int $mode = 1)
 * @method self sin()
 * @method self cos()
 * @method self tan()
 * @method self asin()
 * @method self acos()
 * @method self atan()
 * @method self atanh()
 * @method self atan2(float $x)
 * @method self sinh()
 * @method self cosh()
 * @method self tanh()
 * @method self asinh()
 * @method self acosh()
 * @method self expm1()
 * @method self log1p()
 * @method self is_finite()
 * @method self is_nan()
 * @method self intdiv(int $num2)
 * @method self is_infinite()
 * @method self pow(mixed $exponent)
 * @method self exp()
 * @method self log(float $base = 2.718281828459045)
 * @method self log10()
 * @method self sqrt()
 * @method self hypot(float $y)
 * @method self deg2rad()
 * @method self rad2deg()
 * @method self bindec()
 * @method self hexdec()
 * @method self octdec()
 * @method self decbin()
 * @method self decoct()
 * @method self dechex()
 * @method self base_convert(int $from_base, int $to_base)
 * @method self number_format(int $decimals = 0, ?string $decimal_separator = ".", ?string $thousands_separator = ",")
 * @method self fmod(float $num2)
 * @method self fdiv(float $num2)
 * @method self microtime()
 * @method self gettimeofday()
 * @method self getrusage()
 * @method self pack(mixed $values)
 * @method self unpack(string $string, int $offset = 0)
 * @method self password_get_info()
 * @method self password_hash(string|int|null $algo, array $options = [])
 * @method self password_needs_rehash(string|int|null $algo, array $options = [])
 * @method self password_verify(string $hash)
 * @method self proc_open(array $descriptor_spec,   &$pipes, ?string $cwd = null, ?array $env_vars = null, ?array $options = null)
 * @method self proc_close()
 * @method self proc_terminate(int $signal = 15)
 * @method self proc_get_status()
 * @method self quoted_printable_decode()
 * @method self quoted_printable_encode()
 * @method self mt_srand(int $mode = 0)
 * @method self srand(int $mode = 0)
 * @method self rand(int $max)
 * @method self mt_rand(int $max)
 * @method self random_bytes()
 * @method self random_int(int $max)
 * @method self soundex()
 * @method self stream_select(?array  &$write, ?array  &$except, ?int $seconds, int $microseconds = 0)
 * @method self stream_context_create(?array $params = null)
 * @method self stream_context_set_params(array $params)
 * @method self stream_context_get_params()
 * @method self stream_context_set_option(array|string $wrapper_or_options, ?string $option_name = null, mixed $value)
 * @method self stream_context_get_options()
 * @method self stream_context_get_default()
 * @method self stream_context_set_default()
 * @method self stream_filter_prepend(string $filter_name, int $mode = 0, mixed $params)
 * @method self stream_filter_append(string $filter_name, int $mode = 0, mixed $params)
 * @method self stream_filter_remove()
 * @method self stream_socket_client(  &$error_code = null,   &$error_message = null, ?float $timeout = null, int $flags = 4,  $context = null)
 * @method self stream_socket_server(  &$error_code = null,   &$error_message = null, int $flags = 12,  $context = null)
 * @method self stream_socket_accept(?float $timeout = null,   &$peer_name = null)
 * @method self stream_socket_get_name(bool $remote)
 * @method self stream_socket_recvfrom(int $length, int $flags = 0,   &$address = null)
 * @method self stream_socket_sendto(string $data, int $flags = 0, string $address = "")
 * @method self stream_socket_enable_crypto(bool $enable, ?int $crypto_method = null,  $session_stream = null)
 * @method self stream_socket_shutdown(int $mode)
 * @method self stream_socket_pair(int $type, int $protocol)
 * @method self stream_copy_to_stream( $to, ?int $length = null, int $offset = 0)
 * @method self stream_get_contents(?int $length = null, int $offset = -1)
 * @method self stream_supports_lock()
 * @method self stream_set_write_buffer(int $size)
 * @method self set_file_buffer(int $size)
 * @method self stream_set_read_buffer(int $size)
 * @method self stream_set_blocking(bool $enable)
 * @method self socket_set_blocking(bool $enable)
 * @method self stream_get_meta_data()
 * @method self socket_get_status()
 * @method self stream_get_line(int $length, string $ending = "")
 * @method self stream_resolve_include_path()
 * @method self stream_is_local()
 * @method self stream_isatty()
 * @method self stream_set_chunk_size(int $size)
 * @method self stream_set_timeout(int $seconds, int $microseconds = 0)
 * @method self socket_set_timeout(int $seconds, int $microseconds = 0)
 * @method self gettype()
 * @method self get_debug_type()
 * @method self settype(string $type)
 * @method self intval(int $base = 10)
 * @method self floatval()
 * @method self doubleval()
 * @method self boolval()
 * @method self strval()
 * @method self is_null()
 * @method self is_resource()
 * @method self is_bool()
 * @method self is_int()
 * @method self is_integer()
 * @method self is_long()
 * @method self is_float()
 * @method self is_double()
 * @method self is_numeric()
 * @method self is_string()
 * @method self is_array()
 * @method self is_object()
 * @method self is_scalar()
 * @method self is_callable(bool $syntax_only = false,   &$callable_name = null)
 * @method self is_iterable()
 * @method self is_countable()
 * @method self uniqid(bool $more_entropy = false)
 * @method self parse_url(int $component = -1)
 * @method self urlencode()
 * @method self urldecode()
 * @method self rawurlencode()
 * @method self rawurldecode()
 * @method self get_headers(bool $associative = false,  $context = null)
 * @method self stream_bucket_make_writeable()
 * @method self stream_bucket_prepend(object $bucket)
 * @method self stream_bucket_append(object $bucket)
 * @method self stream_bucket_new(string $buffer)
 * @method self stream_filter_register(string $class)
 * @method self convert_uuencode()
 * @method self convert_uudecode()
 * @method self var_dump(mixed $values)
 * @method self var_export(bool $return = false)
 * @method self debug_zval_dump(mixed $values)
 * @method self serialize()
 * @method self unserialize(array $options = [])
 * @method self memory_get_usage()
 * @method self memory_get_peak_usage()
 * @method self version_compare(string $version2, ?string $operator = null)
 * @method self msg_get_queue(int $permissions = 438)
 * @method self msg_send(int $message_type,  $message, bool $serialize = true, bool $blocking = true,   &$error_code = null)
 * @method self msg_receive(int $desired_message_type,   &$received_message_type, int $max_message_size, mixed  &$message, bool $unserialize = true, int $flags = 0,   &$error_code = null)
 * @method self msg_remove_queue()
 * @method self msg_stat_queue()
 * @method self msg_set_queue(array $data)
 * @method self msg_queue_exists()
 * @method self sem_get(int $max_acquire = 1, int $permissions = 438, bool $auto_release = true)
 * @method self sem_acquire(bool $non_blocking = false)
 * @method self sem_release()
 * @method self sem_remove()
 * @method self shm_attach(?int $size = null, int $permissions = 438)
 * @method self shm_detach()
 * @method self shm_has_var(int $key)
 * @method self shm_remove()
 * @method self shm_put_var(int $key, mixed $value)
 * @method self shm_get_var(int $key)
 * @method self shm_remove_var(int $key)
 * @method self tidy_parse_string(array|string|null $config = null, ?string $encoding = null)
 * @method self tidy_get_error_buffer()
 * @method self tidy_get_output()
 * @method self tidy_parse_file(array|string|null $config = null, ?string $encoding = null, bool $useIncludePath = false)
 * @method self tidy_clean_repair()
 * @method self tidy_repair_string(array|string|null $config = null, ?string $encoding = null)
 * @method self tidy_repair_file(array|string|null $config = null, ?string $encoding = null, bool $useIncludePath = false)
 * @method self tidy_diagnose()
 * @method self tidy_get_opt_doc(string $option)
 * @method self tidy_get_config()
 * @method self tidy_get_status()
 * @method self tidy_get_html_ver()
 * @method self tidy_is_xhtml()
 * @method self tidy_is_xml()
 * @method self tidy_error_count()
 * @method self tidy_warning_count()
 * @method self tidy_access_count()
 * @method self tidy_config_count()
 * @method self tidy_getopt(string $option)
 * @method self tidy_get_root()
 * @method self tidy_get_html()
 * @method self tidy_get_head()
 * @method self tidy_get_body()
 * @method self token_get_all(int $flags = 0)
 * @method self token_name()
 * @method self xml_parser_create()
 * @method self xml_parser_create_ns(string $separator = ":")
 * @method self xml_set_object(object $object)
 * @method self xml_set_element_handler( $start_handler,  $end_handler)
 * @method self xml_set_character_data_handler( $handler)
 * @method self xml_set_processing_instruction_handler( $handler)
 * @method self xml_set_default_handler( $handler)
 * @method self xml_set_unparsed_entity_decl_handler( $handler)
 * @method self xml_set_notation_decl_handler( $handler)
 * @method self xml_set_external_entity_ref_handler( $handler)
 * @method self xml_set_start_namespace_decl_handler( $handler)
 * @method self xml_set_end_namespace_decl_handler( $handler)
 * @method self xml_parse(string $data, bool $is_final = false)
 * @method self xml_parse_into_struct(string $data,   &$values,   &$index = null)
 * @method self xml_get_error_code()
 * @method self xml_error_string()
 * @method self xml_get_current_line_number()
 * @method self xml_get_current_column_number()
 * @method self xml_get_current_byte_index()
 * @method self xml_parser_free()
 * @method self xml_parser_set_option(int $option,  $value)
 * @method self xml_parser_get_option(int $option)
 * @method self xmlwriter_open_uri()
 * @method self xmlwriter_set_indent(bool $enable)
 * @method self xmlwriter_set_indent_string(string $indentation)
 * @method self xmlwriter_start_comment()
 * @method self xmlwriter_end_comment()
 * @method self xmlwriter_start_attribute(string $name)
 * @method self xmlwriter_end_attribute()
 * @method self xmlwriter_write_attribute(string $name, string $value)
 * @method self xmlwriter_start_attribute_ns(?string $prefix, string $name, ?string $namespace)
 * @method self xmlwriter_write_attribute_ns(?string $prefix, string $name, ?string $namespace, string $value)
 * @method self xmlwriter_start_element(string $name)
 * @method self xmlwriter_end_element()
 * @method self xmlwriter_full_end_element()
 * @method self xmlwriter_start_element_ns(?string $prefix, string $name, ?string $namespace)
 * @method self xmlwriter_write_element(string $name, ?string $content = null)
 * @method self xmlwriter_write_element_ns(?string $prefix, string $name, ?string $namespace, ?string $content = null)
 * @method self xmlwriter_start_pi(string $target)
 * @method self xmlwriter_end_pi()
 * @method self xmlwriter_write_pi(string $target, string $content)
 * @method self xmlwriter_start_cdata()
 * @method self xmlwriter_end_cdata()
 * @method self xmlwriter_write_cdata(string $content)
 * @method self xmlwriter_text(string $content)
 * @method self xmlwriter_write_raw(string $content)
 * @method self xmlwriter_start_document(?string $version = "1.0", ?string $encoding = null, ?string $standalone = null)
 * @method self xmlwriter_end_document()
 * @method self xmlwriter_write_comment(string $content)
 * @method self xmlwriter_start_dtd(string $qualifiedName, ?string $publicId = null, ?string $systemId = null)
 * @method self xmlwriter_end_dtd()
 * @method self xmlwriter_write_dtd(string $name, ?string $publicId = null, ?string $systemId = null, ?string $content = null)
 * @method self xmlwriter_start_dtd_element(string $qualifiedName)
 * @method self xmlwriter_end_dtd_element()
 * @method self xmlwriter_write_dtd_element(string $name, string $content)
 * @method self xmlwriter_start_dtd_attlist(string $name)
 * @method self xmlwriter_end_dtd_attlist()
 * @method self xmlwriter_write_dtd_attlist(string $name, string $content)
 * @method self xmlwriter_start_dtd_entity(string $name, bool $isParam)
 * @method self xmlwriter_end_dtd_entity()
 * @method self xmlwriter_write_dtd_entity(string $name, string $content, bool $isParam = false, ?string $publicId = null, ?string $systemId = null, ?string $notationData = null)
 * @method self xmlwriter_output_memory(bool $flush = true)
 * @method self xmlwriter_flush(bool $empty = true)
 * @method self zip_open()
 * @method self zip_close()
 * @method self zip_read()
 * @method self zip_entry_open( $zip_entry, string $mode = "rb")
 * @method self zip_entry_close()
 * @method self zip_entry_read(int $len = 1024)
 * @method self zip_entry_name()
 * @method self zip_entry_compressedsize()
 * @method self zip_entry_filesize()
 * @method self zip_entry_compressionmethod()
 * @method self opcache_get_status()
 * @method self opcache_compile_file()
 * @method self opcache_invalidate(bool $force = false)
 * @method self opcache_is_script_cached()
 * @method self dl()
 * @method self cli_set_process_title()
 */
trait Link
{
    /**
     * @param callable|array|null $callable
     * @return mixed|self
     */
    public function __invoke(...$callable): mixed
    {
        return $callable ? $this->to(...$callable) : $this->up();
    }

    /**
     * @return mixed|self
     */
    public function __call(string $name, array $arguments)
    {
        return $this->__invoke($name, ...$arguments);
    }
}
